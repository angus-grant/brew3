[
    {
        "id": "64dbccc4.045ad4",
        "type": "tab",
        "label": "HLT Buttons",
        "disabled": false,
        "info": ""
    },
    {
        "id": "921f2684.926868",
        "type": "tab",
        "label": "HLT Controller",
        "disabled": false,
        "info": ""
    },
    {
        "id": "20e5f99d.45d096",
        "type": "tab",
        "label": "MLT Buttons",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f292261.86badc",
        "type": "tab",
        "label": "MLT Controller",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c8b28591.06aa18",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bc06885f.8d8148",
        "type": "tab",
        "label": "BK Buttons",
        "disabled": false,
        "info": ""
    },
    {
        "id": "78e2f0b5.5a802",
        "type": "tab",
        "label": "BK Controller",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9cd7cfb1.4ac46",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "34bce47d.6c8dac",
        "type": "tab",
        "label": "Temperatures",
        "disabled": false,
        "info": ""
    },
    {
        "id": "10a92214.f225ae",
        "type": "tab",
        "label": "Calibration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c68db1a2.68e94",
        "type": "tab",
        "label": "Pump control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "696aae1c.d3b45",
        "type": "tab",
        "label": "Element Outputs",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c3bfffec.8ad98",
        "type": "tab",
        "label": "PID Outputs",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3da984a3.27885c",
        "type": "tab",
        "label": "Mash Schedule",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e58cd1d0.00b6",
        "type": "tab",
        "label": "UI navigation and style",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3b1619f7.77f936",
        "type": "tab",
        "label": "Brewers Chronicle",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f26e00eb.30cfc",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#094779",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#094779",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#094779",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0e71c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#094779",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "brew3",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "YYYY-MM-DD",
            "sizes": {
                "sx": 40,
                "sy": 40,
                "gx": 1,
                "gy": 1,
                "cx": 1,
                "cy": 1,
                "px": 1,
                "py": 1
            }
        }
    },
    {
        "id": "1a3824a0.4dd3fb",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a0e00a00.81b428",
        "type": "ui_group",
        "name": "HLT",
        "tab": "1a3824a0.4dd3fb",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "ea5e6691.a9d4b8",
        "type": "ui_group",
        "name": "MLT",
        "tab": "1a3824a0.4dd3fb",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "9d59abb0.326b08",
        "type": "ui_group",
        "name": "BK",
        "tab": "1a3824a0.4dd3fb",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "3a5d5e9b.7af2a2",
        "type": "ui_group",
        "name": "Timer",
        "tab": "1a3824a0.4dd3fb",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "867a95f.bdb8168",
        "type": "ui_group",
        "name": "Status",
        "tab": "1a3824a0.4dd3fb",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "51bd7048.52028",
        "type": "ui_tab",
        "name": "Calibration",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9f19d793.eac5f8",
        "type": "ui_group",
        "name": "HLT Calibration",
        "tab": "51bd7048.52028",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f52ce78c.180578",
        "type": "ui_group",
        "name": "MLT Calibration",
        "tab": "51bd7048.52028",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4db7f25b.b9ea8c",
        "type": "ui_group",
        "name": "BK Calibration",
        "tab": "51bd7048.52028",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "99bd808a.f2698",
        "type": "ui_group",
        "name": "MLT Settings",
        "tab": "6d962cd7.d7a624",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "96ccbe54.5ee14",
        "type": "ui_group",
        "name": "HLT Settings",
        "tab": "6d962cd7.d7a624",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "6d962cd7.d7a624",
        "type": "ui_tab",
        "name": "Elements",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e71aa9ca.9bbda8",
        "type": "ui_group",
        "name": "BK Settings",
        "tab": "6d962cd7.d7a624",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1a3206d4.f7f279",
        "type": "ui_tab",
        "name": "General Settings",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a505f112.ea455",
        "type": "ui_tab",
        "name": "Mash Schedule",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e010af88.2414c",
        "type": "ui_group",
        "name": "Settings",
        "tab": "a505f112.ea455",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "4871467d.3f6578",
        "type": "ui_group",
        "name": "Mash Schedule",
        "tab": "a505f112.ea455",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "6c2dc2b5.3e20ac",
        "type": "ui_group",
        "name": "Bottom",
        "tab": "a505f112.ea455",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false
    },
    {
        "id": "4ab794a8.956e2c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "e010af88.2414c",
        "order": 4,
        "width": 8,
        "height": 1
    },
    {
        "id": "c197493c.080228",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "e010af88.2414c",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "a97ca045.0ef45",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "e010af88.2414c",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "ba76eae3.a07d28",
        "type": "ui_group",
        "name": "SETTINGS",
        "tab": "c9f00b3c.c58798",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c9f00b3c.c58798",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "226e9c90.894b14",
        "type": "ui_group",
        "name": "LOGGING",
        "tab": "47377554.37684c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "47377554.37684c",
        "type": "ui_tab",
        "name": "General Settings",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a4a3ad50.dc574",
        "type": "ui_group",
        "name": "Manual Timer",
        "tab": "1a3824a0.4dd3fb",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "bfd50872.a6f5a8",
        "type": "function",
        "z": "34bce47d.6c8dac",
        "name": "calibrated HLT temp value",
        "func": "var rawHigh = global.get('HLT-raw-high', 'storeInFile');\nvar rawLow = global.get('HLT-raw-low', 'storeInFile');\n\nvar referenceHigh = 99.9;\nvar referenceLow = 0.0;\nvar rawRange = rawHigh - rawLow;\nvar referenceRange = referenceHigh - referenceLow;\n\nvar rawValue = msg.payload;\n\nvar correctedValue = (((rawValue - rawLow) * referenceRange) / rawRange) + referenceLow;\nmsg.payload = correctedValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "34c9f079.97287",
                "536be9dd.80ff78"
            ]
        ]
    },
    {
        "id": "34c9f079.97287",
        "type": "smooth",
        "z": "34bce47d.6c8dac",
        "name": "HLT-smooth",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 850,
        "y": 160,
        "wires": [
            [
                "d65ad63e.7e4608"
            ]
        ]
    },
    {
        "id": "d65ad63e.7e4608",
        "type": "ui_gauge",
        "z": "34bce47d.6c8dac",
        "name": "HLT Actual Temp",
        "group": "a0e00a00.81b428",
        "order": 2,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "Actual Temp",
        "format": "{{value}}c",
        "min": 0,
        "max": "101",
        "colors": [
            "#ffd700",
            "#ffd700",
            "#ffd700"
        ],
        "seg1": "50",
        "seg2": "78",
        "x": 1030,
        "y": 160,
        "wires": []
    },
    {
        "id": "3fbb4083.48588",
        "type": "link in",
        "z": "10a92214.f225ae",
        "name": "HLT raw temperature input",
        "links": [
            "78391837.520088"
        ],
        "x": 135,
        "y": 300,
        "wires": [
            [
                "e129d311.79166"
            ]
        ]
    },
    {
        "id": "e129d311.79166",
        "type": "ui_text",
        "z": "10a92214.f225ae",
        "group": "9f19d793.eac5f8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "HLT Raw temperature",
        "label": "Raw",
        "format": "{{msg.payload | number:1}}°C",
        "layout": "row-spread",
        "x": 300,
        "y": 300,
        "wires": []
    },
    {
        "id": "f1a9f9c.d385308",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "get global.HLT-raw-high",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::HLT-raw-high",
        "payloadType": "global",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "7c0d3b95.ce9424",
                "9565d32f.51933"
            ]
        ]
    },
    {
        "id": "7c0d3b95.ce9424",
        "type": "ui_numeric",
        "z": "10a92214.f225ae",
        "name": "HLT Raw High",
        "label": "Raw high",
        "tooltip": "",
        "group": "9f19d793.eac5f8",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "step": "0.05",
        "x": 820,
        "y": 260,
        "wires": [
            [
                "9565d32f.51933"
            ]
        ]
    },
    {
        "id": "9565d32f.51933",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set global.HLT-raw-high",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::HLT-raw-high",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5f536ef1.7045a",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "get global.HLT-raw-low",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::HLT-raw-low",
        "payloadType": "global",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "90aa0055.ee035",
                "792a85e7.08e24c"
            ]
        ]
    },
    {
        "id": "90aa0055.ee035",
        "type": "ui_numeric",
        "z": "10a92214.f225ae",
        "name": "HLT Raw Low",
        "label": "Raw low",
        "tooltip": "",
        "group": "9f19d793.eac5f8",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "step": "0.05",
        "x": 820,
        "y": 340,
        "wires": [
            [
                "792a85e7.08e24c"
            ]
        ]
    },
    {
        "id": "792a85e7.08e24c",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set global.HLT-raw-low",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::HLT-raw-low",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "78391837.520088",
        "type": "link out",
        "z": "34bce47d.6c8dac",
        "name": "HLT raw temperature",
        "links": [
            "3fbb4083.48588"
        ],
        "x": 535,
        "y": 80,
        "wires": []
    },
    {
        "id": "aba40de5.32352",
        "type": "link in",
        "z": "10a92214.f225ae",
        "name": "HLT calibrated temperature input",
        "links": [],
        "x": 135,
        "y": 380,
        "wires": [
            [
                "c399d0f3.8a1d2"
            ]
        ]
    },
    {
        "id": "c399d0f3.8a1d2",
        "type": "ui_text",
        "z": "10a92214.f225ae",
        "group": "9f19d793.eac5f8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "HLT Calibrated temperature",
        "label": "Calibrated",
        "format": "{{msg.payload | number:1}}°C",
        "layout": "row-spread",
        "x": 320,
        "y": 380,
        "wires": []
    },
    {
        "id": "536be9dd.80ff78",
        "type": "link out",
        "z": "34bce47d.6c8dac",
        "name": "HLT calibrated temperature",
        "links": [
            "3d56730.b05758e",
            "59b24a1e.c32eb4",
            "aba40de5.32352",
            "ae9e02d6.4b8b1"
        ],
        "x": 795,
        "y": 120,
        "wires": []
    },
    {
        "id": "1b18956d.818bdb",
        "type": "link in",
        "z": "10a92214.f225ae",
        "name": "MLT Raw temp calibration",
        "links": [
            "958b2b91.c4c778"
        ],
        "x": 135,
        "y": 460,
        "wires": [
            [
                "e386fc7f.604b1"
            ]
        ]
    },
    {
        "id": "e386fc7f.604b1",
        "type": "ui_text",
        "z": "10a92214.f225ae",
        "group": "f52ce78c.180578",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "MLT Raw temperature",
        "label": "Raw",
        "format": "{{msg.payload | number:1}}°C",
        "layout": "row-spread",
        "x": 300,
        "y": 460,
        "wires": []
    },
    {
        "id": "934868d8.19b2f8",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "get global.MLT-raw-high",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::MLT-raw-high",
        "payloadType": "global",
        "x": 590,
        "y": 460,
        "wires": [
            [
                "bafacf94.adcc2",
                "e8c29982.f791c8"
            ]
        ]
    },
    {
        "id": "bafacf94.adcc2",
        "type": "ui_numeric",
        "z": "10a92214.f225ae",
        "name": "MLT Raw High",
        "label": "Raw high",
        "tooltip": "",
        "group": "f52ce78c.180578",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "step": "0.05",
        "x": 820,
        "y": 420,
        "wires": [
            [
                "e8c29982.f791c8"
            ]
        ]
    },
    {
        "id": "e8c29982.f791c8",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set global.MLT-raw-high",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::MLT-raw-high",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e6406969.09ec48",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "get global.MLT-raw-low",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::MLT-raw-low",
        "payloadType": "global",
        "x": 590,
        "y": 540,
        "wires": [
            [
                "395f2270.824cce",
                "b9f9e2ce.1392b"
            ]
        ]
    },
    {
        "id": "395f2270.824cce",
        "type": "ui_numeric",
        "z": "10a92214.f225ae",
        "name": "MLT Raw Low",
        "label": "Raw low",
        "tooltip": "",
        "group": "f52ce78c.180578",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "step": "0.05",
        "x": 820,
        "y": 500,
        "wires": [
            [
                "b9f9e2ce.1392b"
            ]
        ]
    },
    {
        "id": "b9f9e2ce.1392b",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set global.MLT-raw-low",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::MLT-raw-low",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f1d998e3.0c56d8",
        "type": "link in",
        "z": "10a92214.f225ae",
        "name": "MLT calibrated temperature input",
        "links": [
            "99f091b4.fb026"
        ],
        "x": 135,
        "y": 540,
        "wires": [
            [
                "919b73b3.e4bff"
            ]
        ]
    },
    {
        "id": "919b73b3.e4bff",
        "type": "ui_text",
        "z": "10a92214.f225ae",
        "group": "f52ce78c.180578",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "MLT Calibrated temperature",
        "label": "Calibrated",
        "format": "{{msg.payload | number:1}}°C",
        "layout": "row-spread",
        "x": 320,
        "y": 540,
        "wires": []
    },
    {
        "id": "ae06031b.f8519",
        "type": "function",
        "z": "34bce47d.6c8dac",
        "name": "calibrated MLT temp value",
        "func": "var rawHigh = global.get('MLT-raw-high', 'storeInFile');\nvar rawLow = global.get('MLT-raw-low', 'storeInFile');\nvar referenceHigh = 99.9;\nvar referenceLow = 0.0;\nvar rawRange = rawHigh - rawLow;\nvar referenceRange = referenceHigh - referenceLow;\n\nvar rawValue = msg.payload;\n\nvar correctedValue = (((rawValue - rawLow) * referenceRange) / rawRange) + referenceLow;\nmsg.payload = correctedValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 280,
        "wires": [
            [
                "99f091b4.fb026",
                "b6506d94.1896"
            ]
        ]
    },
    {
        "id": "99f091b4.fb026",
        "type": "link out",
        "z": "34bce47d.6c8dac",
        "name": "MLT calibrated temperature",
        "links": [
            "3d56730.b05758e",
            "784c4c53.ea2cb4",
            "f1d998e3.0c56d8"
        ],
        "x": 775,
        "y": 240,
        "wires": []
    },
    {
        "id": "b6506d94.1896",
        "type": "smooth",
        "z": "34bce47d.6c8dac",
        "name": "MLT smooth",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 830,
        "y": 320,
        "wires": [
            [
                "f9892cc7.e9bb5"
            ]
        ]
    },
    {
        "id": "f9892cc7.e9bb5",
        "type": "ui_gauge",
        "z": "34bce47d.6c8dac",
        "name": "MLT Actual Temp",
        "group": "ea5e6691.a9d4b8",
        "order": 2,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "Actual Temp",
        "format": "{{value}}c",
        "min": 0,
        "max": "101",
        "colors": [
            "#ffd700",
            "#ffd700",
            "#ffd700"
        ],
        "seg1": "50",
        "seg2": "78",
        "x": 1010,
        "y": 320,
        "wires": []
    },
    {
        "id": "958b2b91.c4c778",
        "type": "link out",
        "z": "34bce47d.6c8dac",
        "name": "MLT raw temperature",
        "links": [
            "1b18956d.818bdb"
        ],
        "x": 495,
        "y": 240,
        "wires": []
    },
    {
        "id": "7247a52b.2ac94c",
        "type": "link in",
        "z": "10a92214.f225ae",
        "name": "BK Raw temp calibration",
        "links": [
            "720cfea9.d2587"
        ],
        "x": 135,
        "y": 600,
        "wires": [
            [
                "1aa9abf6.f3b7a4"
            ]
        ]
    },
    {
        "id": "1aa9abf6.f3b7a4",
        "type": "ui_text",
        "z": "10a92214.f225ae",
        "group": "4db7f25b.b9ea8c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "BK Raw temperature",
        "label": "Raw",
        "format": "{{msg.payload | number:1}}°C",
        "layout": "row-spread",
        "x": 300,
        "y": 600,
        "wires": []
    },
    {
        "id": "4db25c4b.6b1b64",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "get global.BK-raw-high",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::BK-raw-high",
        "payloadType": "global",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "e29b096b.1f0f88",
                "1bdeb36a.d3850d"
            ]
        ]
    },
    {
        "id": "e29b096b.1f0f88",
        "type": "ui_numeric",
        "z": "10a92214.f225ae",
        "name": "BK Raw High",
        "label": "Raw high",
        "tooltip": "",
        "group": "4db7f25b.b9ea8c",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "step": "0.05",
        "x": 810,
        "y": 560,
        "wires": [
            [
                "1bdeb36a.d3850d"
            ]
        ]
    },
    {
        "id": "1bdeb36a.d3850d",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set global.BK-raw-high",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BK-raw-high",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "1542ddd8.f8f412",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "get global.BK-raw-low",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::BK-raw-low",
        "payloadType": "global",
        "x": 580,
        "y": 680,
        "wires": [
            [
                "33bf267b.12dfda",
                "5c0aecf6.91fd54"
            ]
        ]
    },
    {
        "id": "33bf267b.12dfda",
        "type": "ui_numeric",
        "z": "10a92214.f225ae",
        "name": "BK Raw Low",
        "label": "Raw low",
        "tooltip": "",
        "group": "4db7f25b.b9ea8c",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "step": "0.05",
        "x": 810,
        "y": 640,
        "wires": [
            [
                "5c0aecf6.91fd54"
            ]
        ]
    },
    {
        "id": "5c0aecf6.91fd54",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set global.BK-raw-low",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BK-raw-low",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "99efbbed.1a9d98",
        "type": "link in",
        "z": "10a92214.f225ae",
        "name": "BK calibrated temperature input",
        "links": [
            "c5bb895f.256208"
        ],
        "x": 135,
        "y": 680,
        "wires": [
            [
                "6f2cb356.23e07c"
            ]
        ]
    },
    {
        "id": "6f2cb356.23e07c",
        "type": "ui_text",
        "z": "10a92214.f225ae",
        "group": "4db7f25b.b9ea8c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "BK Calibrated temperature",
        "label": "Calibrated",
        "format": "{{msg.payload | number:1}}°C",
        "layout": "row-spread",
        "x": 320,
        "y": 680,
        "wires": []
    },
    {
        "id": "b8235e4b.fda1d",
        "type": "function",
        "z": "34bce47d.6c8dac",
        "name": "calibrated BK temp value",
        "func": "var rawHigh = global.get('BK-raw-high', 'storeInFile');\nvar rawLow = global.get('BK-raw-low', 'storeInFile');\nvar referenceHigh = 99.9;\nvar referenceLow = 0.0;\nvar rawRange = rawHigh - rawLow;\nvar referenceRange = referenceHigh - referenceLow;\n\nvar rawValue = msg.payload;\n\nvar correctedValue = (((rawValue - rawLow) * referenceRange) / rawRange) + referenceLow;\nmsg.payload = correctedValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "c5bb895f.256208",
                "3d0b0e81.eac3c2"
            ]
        ]
    },
    {
        "id": "c5bb895f.256208",
        "type": "link out",
        "z": "34bce47d.6c8dac",
        "name": "BK calibrated temperature",
        "links": [
            "3857893c.46b1c6",
            "3d56730.b05758e",
            "99efbbed.1a9d98"
        ],
        "x": 775,
        "y": 380,
        "wires": []
    },
    {
        "id": "3d0b0e81.eac3c2",
        "type": "smooth",
        "z": "34bce47d.6c8dac",
        "name": "BK smooth",
        "property": "payload",
        "action": "mean",
        "count": "5",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 830,
        "y": 460,
        "wires": [
            [
                "1ba5d1c7.0eaebe"
            ]
        ]
    },
    {
        "id": "1ba5d1c7.0eaebe",
        "type": "ui_gauge",
        "z": "34bce47d.6c8dac",
        "name": "BK Actual Temp",
        "group": "9d59abb0.326b08",
        "order": 2,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "Actual Temp",
        "format": "{{value}}c",
        "min": 0,
        "max": "101",
        "colors": [
            "#ffd700",
            "#ffd700",
            "#ffd700"
        ],
        "seg1": "50",
        "seg2": "78",
        "x": 1000,
        "y": 460,
        "wires": []
    },
    {
        "id": "720cfea9.d2587",
        "type": "link out",
        "z": "34bce47d.6c8dac",
        "name": "BK raw temperature",
        "links": [
            "7247a52b.2ac94c"
        ],
        "x": 495,
        "y": 380,
        "wires": []
    },
    {
        "id": "b5c6ad0d.e873c",
        "type": "inject",
        "z": "7f292261.86badc",
        "name": "Default MLT Target",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::mlt_target",
        "payloadType": "global",
        "x": 290,
        "y": 386,
        "wires": [
            [
                "c093d20d.9045a",
                "f753aaa0.4acb98",
                "c788fa64.85dad8"
            ]
        ]
    },
    {
        "id": "c093d20d.9045a",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mlt_target",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 374,
        "wires": [
            []
        ]
    },
    {
        "id": "f753aaa0.4acb98",
        "type": "ui_gauge",
        "z": "7f292261.86badc",
        "name": "MLT target temp",
        "group": "ea5e6691.a9d4b8",
        "order": 3,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "Target Temp",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "78",
        "x": 600,
        "y": 414,
        "wires": []
    },
    {
        "id": "1d1d7650.6ae5fa",
        "type": "ui_text",
        "z": "7f292261.86badc",
        "group": "99bd808a.f2698",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "MLT target",
        "label": "Target",
        "format": "{{payload | number:1}}°C",
        "layout": "row-spread",
        "x": 590,
        "y": 454,
        "wires": []
    },
    {
        "id": "c19146c.e1f96b8",
        "type": "inject",
        "z": "921f2684.926868",
        "name": "Default HLT Target",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::hlt_target",
        "payloadType": "global",
        "x": 290,
        "y": 390,
        "wires": [
            [
                "949c5578.12c3c8",
                "a49e6078.923ba",
                "9a324627.037e28"
            ]
        ]
    },
    {
        "id": "949c5578.12c3c8",
        "type": "change",
        "z": "921f2684.926868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::hlt_target",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 370,
        "wires": [
            []
        ]
    },
    {
        "id": "a49e6078.923ba",
        "type": "ui_gauge",
        "z": "921f2684.926868",
        "name": "HLT target temp",
        "group": "a0e00a00.81b428",
        "order": 3,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "Target Temp",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "78",
        "x": 600,
        "y": 410,
        "wires": []
    },
    {
        "id": "fc678f03.52e16",
        "type": "ui_text",
        "z": "921f2684.926868",
        "group": "96ccbe54.5ee14",
        "order": 4,
        "width": "0",
        "height": "0",
        "name": "HLT target",
        "label": "Target",
        "format": "{{payload | number:1}}°C",
        "layout": "row-spread",
        "x": 590,
        "y": 450,
        "wires": []
    },
    {
        "id": "aad2f85e.13eed8",
        "type": "inject",
        "z": "921f2684.926868",
        "name": "Default Element Duty",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::hlt_manual_duty",
        "payloadType": "flow",
        "x": 300,
        "y": 320,
        "wires": [
            [
                "2157eaab.7f77d6"
            ]
        ]
    },
    {
        "id": "6d936cd7.b504e4",
        "type": "change",
        "z": "921f2684.926868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::hlt_manual_duty",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "effed81f.0e5528",
        "type": "inject",
        "z": "7f292261.86badc",
        "name": "Default Element Duty",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::mlt_manual_duty",
        "payloadType": "flow",
        "x": 309,
        "y": 320,
        "wires": [
            [
                "7f86574c.32cd68"
            ]
        ]
    },
    {
        "id": "3d3c44d8.0aa2ec",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mlt_manual_duty",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 755,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1c02ec34.9cf394",
        "type": "ui_button",
        "z": "64dbccc4.045ad4",
        "name": "",
        "group": "a0e00a00.81b428",
        "order": 7,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "PID",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "e674e86.07bc118"
            ]
        ]
    },
    {
        "id": "c86d1b.084d52e8",
        "type": "ui_button",
        "z": "64dbccc4.045ad4",
        "name": "",
        "group": "a0e00a00.81b428",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Manual",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "c65090bd.743cb"
            ]
        ]
    },
    {
        "id": "d4fad3a8.34dd7",
        "type": "ui_button",
        "z": "64dbccc4.045ad4",
        "name": "",
        "group": "a0e00a00.81b428",
        "order": 9,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "30978ff7.bcead"
            ]
        ]
    },
    {
        "id": "e674e86.07bc118",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "HLT PID Button State",
        "links": [
            "8dd830cc.8676b",
            "8f26628d.11d82",
            "f9c33fbf.60e96",
            "1bfa54fc.6b555b"
        ],
        "x": 335,
        "y": 100,
        "wires": []
    },
    {
        "id": "c65090bd.743cb",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "HLT Manual Button State",
        "links": [
            "32bfe155.8d454e",
            "8dd830cc.8676b",
            "8f26628d.11d82",
            "af164f02.e1e58",
            "f9c33fbf.60e96"
        ],
        "x": 335,
        "y": 140,
        "wires": []
    },
    {
        "id": "30978ff7.bcead",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "HLT Off Button State",
        "links": [
            "8dd830cc.8676b",
            "8f26628d.11d82",
            "f9c33fbf.60e96",
            "d180f01d.2d113",
            "797a9363.080f6c",
            "1445bd1b.557c93"
        ],
        "x": 335,
        "y": 180,
        "wires": []
    },
    {
        "id": "8dd830cc.8676b",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT PID Button State",
        "links": [
            "30978ff7.bcead",
            "c65090bd.743cb",
            "e674e86.07bc118"
        ],
        "x": 95,
        "y": 360,
        "wires": [
            [
                "69c2cae1.3d8754"
            ]
        ]
    },
    {
        "id": "69c2cae1.3d8754",
        "type": "delay",
        "z": "64dbccc4.045ad4",
        "name": "PID Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 200,
        "y": 360,
        "wires": [
            [
                "f4896af9.843f38"
            ]
        ]
    },
    {
        "id": "f4896af9.843f38",
        "type": "switch",
        "z": "64dbccc4.045ad4",
        "name": "",
        "property": "hlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 400,
        "wires": [
            [
                "4f9b6cd8.515aa4"
            ],
            [
                "b130bd7.fdc984"
            ]
        ]
    },
    {
        "id": "4f9b6cd8.515aa4",
        "type": "switch",
        "z": "64dbccc4.045ad4",
        "name": "",
        "property": "hlt_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "f5472eca.b35b9"
            ],
            [
                "b130bd7.fdc984"
            ]
        ]
    },
    {
        "id": "f5472eca.b35b9",
        "type": "change",
        "z": "64dbccc4.045ad4",
        "name": "hlt PID on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 360,
        "wires": [
            [
                "cbb8aa98.3dbcc8"
            ]
        ]
    },
    {
        "id": "b130bd7.fdc984",
        "type": "change",
        "z": "64dbccc4.045ad4",
        "name": "hlt PID off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 400,
        "wires": [
            [
                "cbb8aa98.3dbcc8"
            ]
        ]
    },
    {
        "id": "cbb8aa98.3dbcc8",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "HLT PID button colour",
        "links": [
            "e9257400.877928"
        ],
        "x": 735,
        "y": 380,
        "wires": []
    },
    {
        "id": "e9257400.877928",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT PID button colour",
        "links": [
            "cbb8aa98.3dbcc8"
        ],
        "x": 95,
        "y": 100,
        "wires": [
            [
                "1c02ec34.9cf394"
            ]
        ]
    },
    {
        "id": "8f26628d.11d82",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT Manual Button State",
        "links": [
            "30978ff7.bcead",
            "c65090bd.743cb",
            "e674e86.07bc118"
        ],
        "x": 95,
        "y": 480,
        "wires": [
            [
                "cf257d54.c260f"
            ]
        ]
    },
    {
        "id": "cf257d54.c260f",
        "type": "delay",
        "z": "64dbccc4.045ad4",
        "name": "Manual Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 230,
        "y": 480,
        "wires": [
            [
                "110d16a3.0b4579"
            ]
        ]
    },
    {
        "id": "110d16a3.0b4579",
        "type": "switch",
        "z": "64dbccc4.045ad4",
        "name": "",
        "property": "hlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 520,
        "wires": [
            [
                "258b75f8.2156aa"
            ],
            [
                "676360d6.92545"
            ]
        ]
    },
    {
        "id": "258b75f8.2156aa",
        "type": "switch",
        "z": "64dbccc4.045ad4",
        "name": "",
        "property": "hlt_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 500,
        "wires": [
            [
                "2814c839.fd4d78"
            ],
            [
                "676360d6.92545"
            ]
        ]
    },
    {
        "id": "2814c839.fd4d78",
        "type": "change",
        "z": "64dbccc4.045ad4",
        "name": "hlt manual on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "410d1a1d.b41d84"
            ]
        ]
    },
    {
        "id": "676360d6.92545",
        "type": "change",
        "z": "64dbccc4.045ad4",
        "name": "hlt manual off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 520,
        "wires": [
            [
                "410d1a1d.b41d84"
            ]
        ]
    },
    {
        "id": "410d1a1d.b41d84",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "HLT Manual button colour",
        "links": [
            "68f79625.3741c8"
        ],
        "x": 755,
        "y": 500,
        "wires": []
    },
    {
        "id": "f9c33fbf.60e96",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT Off Button State",
        "links": [
            "30978ff7.bcead",
            "c65090bd.743cb",
            "e674e86.07bc118"
        ],
        "x": 95,
        "y": 580,
        "wires": [
            [
                "63b723b7.8efd6c"
            ]
        ]
    },
    {
        "id": "63b723b7.8efd6c",
        "type": "delay",
        "z": "64dbccc4.045ad4",
        "name": "Off Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 210,
        "y": 580,
        "wires": [
            [
                "579d339c.7b282c"
            ]
        ]
    },
    {
        "id": "579d339c.7b282c",
        "type": "switch",
        "z": "64dbccc4.045ad4",
        "name": "",
        "property": "hlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 620,
        "wires": [
            [
                "51cdd20.c64b53"
            ],
            [
                "885d28a0.c2af78"
            ]
        ]
    },
    {
        "id": "51cdd20.c64b53",
        "type": "change",
        "z": "64dbccc4.045ad4",
        "name": "hlt Off on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 600,
        "wires": [
            [
                "16866b38.7929a5"
            ]
        ]
    },
    {
        "id": "885d28a0.c2af78",
        "type": "change",
        "z": "64dbccc4.045ad4",
        "name": "hlt Off off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 640,
        "wires": [
            [
                "16866b38.7929a5"
            ]
        ]
    },
    {
        "id": "16866b38.7929a5",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "HLT Off button colour",
        "links": [
            "6b3b7e44.d1916"
        ],
        "x": 575,
        "y": 620,
        "wires": []
    },
    {
        "id": "2c519ef7.bb03d2",
        "type": "ui_ui_control",
        "z": "64dbccc4.045ad4",
        "name": "Dashboard connection",
        "events": "all",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "d7800f4e.2001"
            ]
        ]
    },
    {
        "id": "d7800f4e.2001",
        "type": "link out",
        "z": "64dbccc4.045ad4",
        "name": "Off button - initialization",
        "links": [
            "d29c0b0e.466368",
            "d9485d35.5b4ab",
            "eaceda0e.52bf88"
        ],
        "x": 345,
        "y": 260,
        "wires": []
    },
    {
        "id": "eaceda0e.52bf88",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT PID Button initialization",
        "links": [
            "d7800f4e.2001"
        ],
        "x": 95,
        "y": 400,
        "wires": [
            [
                "f4896af9.843f38"
            ]
        ]
    },
    {
        "id": "d29c0b0e.466368",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT Manual Button initialization",
        "links": [
            "d7800f4e.2001"
        ],
        "x": 95,
        "y": 520,
        "wires": [
            [
                "110d16a3.0b4579"
            ]
        ]
    },
    {
        "id": "d9485d35.5b4ab",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT Off Button initialization",
        "links": [
            "d7800f4e.2001"
        ],
        "x": 95,
        "y": 620,
        "wires": [
            [
                "579d339c.7b282c"
            ]
        ]
    },
    {
        "id": "68f79625.3741c8",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT Manual button colour",
        "links": [
            "410d1a1d.b41d84"
        ],
        "x": 95,
        "y": 140,
        "wires": [
            [
                "c86d1b.084d52e8"
            ]
        ]
    },
    {
        "id": "6b3b7e44.d1916",
        "type": "link in",
        "z": "64dbccc4.045ad4",
        "name": "HLT Off button colour",
        "links": [
            "16866b38.7929a5"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "d4fad3a8.34dd7"
            ]
        ]
    },
    {
        "id": "469ea3b5.98e8dc",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_pid, hlt_try = true",
        "rules": [
            {
                "t": "set",
                "p": "hlt_pid",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "hlt_try",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 446,
        "y": 850,
        "wires": [
            [
                "69ce90bd.4c377"
            ]
        ]
    },
    {
        "id": "b7ac22c0.efe65",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_on = hlt_try",
        "rules": [
            {
                "t": "set",
                "p": "hlt_on",
                "pt": "global",
                "to": "hlt_try",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 827,
        "wires": [
            [
                "9702d472.b13988"
            ]
        ]
    },
    {
        "id": "9702d472.b13988",
        "type": "switch",
        "z": "921f2684.926868",
        "name": "hlt_on",
        "property": "hlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 927,
        "wires": [
            [
                "5f6782cf.2c1c5c"
            ],
            [
                "7995a7c7.c83288"
            ]
        ]
    },
    {
        "id": "5f6782cf.2c1c5c",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_lock=true",
        "rules": [
            {
                "t": "set",
                "p": "hlt_lock",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 922,
        "wires": [
            []
        ]
    },
    {
        "id": "7995a7c7.c83288",
        "type": "delay",
        "z": "921f2684.926868",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1000,
        "y": 967,
        "wires": [
            [
                "221b675a.baef28"
            ]
        ]
    },
    {
        "id": "221b675a.baef28",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_lock = false",
        "rules": [
            {
                "t": "set",
                "p": "hlt_lock",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1007,
        "wires": [
            []
        ]
    },
    {
        "id": "69ce90bd.4c377",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "Boil Try Output",
        "links": [
            "888b172b.0250d8"
        ],
        "x": 621,
        "y": 850,
        "wires": []
    },
    {
        "id": "888b172b.0250d8",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "Boil Try Input",
        "links": [
            "69ce90bd.4c377",
            "b178df53.c31b3",
            "1d974b9b.7db294"
        ],
        "x": 715,
        "y": 827,
        "wires": [
            [
                "b7ac22c0.efe65"
            ]
        ]
    },
    {
        "id": "d180f01d.2d113",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "Off button",
        "links": [
            "30978ff7.bcead"
        ],
        "x": 301,
        "y": 771,
        "wires": [
            [
                "efa8d514.61e508"
            ]
        ]
    },
    {
        "id": "efa8d514.61e508",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_pid, hlt_try = false",
        "rules": [
            {
                "t": "set",
                "p": "hlt_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "hlt_try",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 446,
        "y": 771,
        "wires": [
            [
                "b178df53.c31b3"
            ]
        ]
    },
    {
        "id": "b178df53.c31b3",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "Boil Try Output",
        "links": [
            "888b172b.0250d8"
        ],
        "x": 621,
        "y": 771,
        "wires": []
    },
    {
        "id": "32bfe155.8d454e",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "HLT Manual button",
        "links": [
            "c65090bd.743cb"
        ],
        "x": 301,
        "y": 810,
        "wires": [
            [
                "e2656668.513c58"
            ]
        ]
    },
    {
        "id": "e2656668.513c58",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_pid = false, hlt_try = true",
        "rules": [
            {
                "t": "set",
                "p": "hlt_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "hlt_try",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 466,
        "y": 810,
        "wires": [
            [
                "1d974b9b.7db294"
            ]
        ]
    },
    {
        "id": "1d974b9b.7db294",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "Boil Try Output",
        "links": [
            "888b172b.0250d8"
        ],
        "x": 621,
        "y": 810,
        "wires": []
    },
    {
        "id": "af164f02.e1e58",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "HLT Manual button",
        "links": [
            "c65090bd.743cb"
        ],
        "x": 301,
        "y": 890,
        "wires": [
            [
                "757ffbcc.e9fd74"
            ]
        ]
    },
    {
        "id": "757ffbcc.e9fd74",
        "type": "change",
        "z": "921f2684.926868",
        "name": "Zero everything",
        "rules": [
            {
                "t": "set",
                "p": "last_error",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "integrator",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "derivative",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "last_error",
                "pt": "flow",
                "to": "last_error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "integrator",
                "pt": "flow",
                "to": "integrator",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "output",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "target",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 426,
        "y": 930,
        "wires": [
            [
                "7d9e136b.92ae5c"
            ]
        ]
    },
    {
        "id": "7d9e136b.92ae5c",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "Boil PID display",
        "links": [
            "297a459b.f41f0a"
        ],
        "x": 591,
        "y": 930,
        "wires": []
    },
    {
        "id": "797a9363.080f6c",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "Off Button",
        "links": [
            "20fd3e5c.d6ddd2",
            "30978ff7.bcead"
        ],
        "x": 301,
        "y": 930,
        "wires": [
            [
                "757ffbcc.e9fd74"
            ]
        ]
    },
    {
        "id": "7df5efe0.bad88",
        "type": "inject",
        "z": "921f2684.926868",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 285,
        "y": 650,
        "wires": [
            [
                "20fd3e5c.d6ddd2"
            ]
        ]
    },
    {
        "id": "20fd3e5c.d6ddd2",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "Off button - initialization",
        "links": [
            "1445bd1b.557c93",
            "68f756c.e890aa8",
            "797a9363.080f6c"
        ],
        "x": 380,
        "y": 650,
        "wires": []
    },
    {
        "id": "68f756c.e890aa8",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "Off button - initialization",
        "links": [
            "20fd3e5c.d6ddd2"
        ],
        "x": 301,
        "y": 730,
        "wires": [
            [
                "e057f271.e13c7"
            ]
        ]
    },
    {
        "id": "e057f271.e13c7",
        "type": "change",
        "z": "921f2684.926868",
        "name": "hlt_lock, hlt_on, hlt_pid, hlt_try = false",
        "rules": [
            {
                "t": "set",
                "p": "hlt_lock",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "hlt_on",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "hlt_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "hlt_try",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 496,
        "y": 730,
        "wires": [
            []
        ]
    },
    {
        "id": "1445bd1b.557c93",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "Off button",
        "links": [
            "20fd3e5c.d6ddd2",
            "30978ff7.bcead"
        ],
        "x": 301,
        "y": 1030,
        "wires": [
            [
                "55f8207a.49c3b"
            ]
        ]
    },
    {
        "id": "55f8207a.49c3b",
        "type": "change",
        "z": "921f2684.926868",
        "name": "payload = 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 426,
        "y": 1030,
        "wires": [
            [
                "4f2c006c.61798"
            ]
        ]
    },
    {
        "id": "4f2c006c.61798",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "Off Duty",
        "links": [
            "65e8903.19f8f7",
            "8433ff20.b87b7"
        ],
        "x": 601,
        "y": 1030,
        "wires": []
    },
    {
        "id": "784c4c53.ea2cb4",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "MLT PID temperature input",
        "links": [
            "99f091b4.fb026"
        ],
        "x": 195,
        "y": 180,
        "wires": [
            [
                "ed13afe1.404ef",
                "eecd4c9f.3b4a1",
                "11824bd8.cb7d64"
            ]
        ]
    },
    {
        "id": "ed13afe1.404ef",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp-MLT",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 386,
        "y": 181,
        "wires": [
            []
        ]
    },
    {
        "id": "eecd4c9f.3b4a1",
        "type": "switch",
        "z": "7f292261.86badc",
        "name": "mlt_on",
        "property": "mlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 303,
        "y": 240,
        "wires": [
            [
                "da3ec3fd.a0d49"
            ]
        ]
    },
    {
        "id": "da3ec3fd.a0d49",
        "type": "switch",
        "z": "7f292261.86badc",
        "name": "mlt_pid switch",
        "property": "mlt_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 486,
        "y": 240,
        "wires": [
            [
                "85e9c0a7.6bd9d"
            ],
            [
                "2f6bd80.e257328"
            ]
        ]
    },
    {
        "id": "85e9c0a7.6bd9d",
        "type": "function",
        "z": "7f292261.86badc",
        "name": "MLT PID Control",
        "func": "// Note that the algorithm provided below assumes a 1 second iteration time\n// Justin Angevaare\n// May 2018\n\n// Set temperature\nmsg.topic = \"PID-MLT-main-loop\";\nmsg.target =  global.get('mlt_target', 'storeInFile');\nmsg.temperature = msg.payload;\n// Well that node doesn't work... do manually\nmsg.interval = 2000\n\n// Calculate error\nmsg.error = global.get('mlt_target', 'storeInFile') - msg.temperature;\n\n// Set output max\nmsg.integrator = 0;\nmsg.max_output = 100\n\n// Calculate proportional action\nvar pTerm = msg.error * flow.get('p', 'storeInFile');\n\n// Calculate intergral action\nvar iTerm = 0;\nif (pTerm < msg.max_output) {\n    // Calculate integrator max\n    msg.integrator_max = msg.max_output/flow.get('i', 'storeInFile');\n\n    // Update integrator\n    // For purposes of integrator, bound error by [-1, 1]\n    msg.integrator = flow.get('integrator');\n    msg.integrator += (msg.interval/1000) * Math.max(Math.min(msg.error, 1), -1);\n    \n    // Bound total integrator by absolute maximum\n    msg.integrator = Math.max(Math.min(msg.integrator, msg.integrator_max), -msg.integrator_max);\n    \n    // Output updated integrator to flow context\n    flow.set('integrator', msg.integrator);\n    \n    iTerm = msg.integrator * flow.get('i', 'storeInFile');\n}\n\n// Calculate derivative action\nmsg.derivative = (msg.error - flow.get('last_error'))/(msg.interval/1000);\nvar dTerm = msg.derivative * flow.get('d', 'storeInFile');\n\nmsg.output = pTerm + iTerm + dTerm;\n//node.log(pTerm + ' ' + iTerm + ' ' + dTerm);\n// Bound output by [0, max_output]\nmsg.output = Math.max(Math.min(msg.output, msg.max_output), 0);\n\n// Output updated last_error to flow context\nmsg.last_error = msg.error;\nflow.set('last_error', msg.last_error);\n\n// Set payload to element output\nmsg.payload = msg.output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 794,
        "y": 225,
        "wires": [
            [
                "db6261df.6f1e",
                "bac69bc7.32fe18"
            ]
        ]
    },
    {
        "id": "2f6bd80.e257328",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "payload = mlt_manual_duty",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::mlt_manual_duty",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 756,
        "y": 260,
        "wires": [
            [
                "db6261df.6f1e"
            ]
        ]
    },
    {
        "id": "db6261df.6f1e",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT PID or Manual Duty",
        "links": [
            "1a366a91.8afb65",
            "8433ff20.b87b7"
        ],
        "x": 951,
        "y": 246,
        "wires": []
    },
    {
        "id": "bac69bc7.32fe18",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT PID display",
        "links": [
            "1c912274.2c21ae",
            "297a459b.f41f0a"
        ],
        "x": 951,
        "y": 183,
        "wires": []
    },
    {
        "id": "705282d3.0b41cc",
        "type": "inject",
        "z": "7f292261.86badc",
        "name": "Default P",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "43",
        "payloadType": "num",
        "x": 240,
        "y": 511,
        "wires": [
            [
                "8c692fd6.6dcdc"
            ]
        ]
    },
    {
        "id": "8c692fd6.6dcdc",
        "type": "ui_numeric",
        "z": "7f292261.86badc",
        "name": "",
        "label": "K𝗉",
        "tooltip": "",
        "group": "99bd808a.f2698",
        "order": 5,
        "width": "4",
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "99.8",
        "step": "0.1",
        "x": 390,
        "y": 511,
        "wires": [
            [
                "747cb954.fb3dc8"
            ]
        ]
    },
    {
        "id": "747cb954.fb3dc8",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::p",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 511,
        "wires": [
            []
        ]
    },
    {
        "id": "5ab8cdd6.4d1354",
        "type": "inject",
        "z": "7f292261.86badc",
        "name": "Default I",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.15",
        "payloadType": "num",
        "x": 240,
        "y": 551,
        "wires": [
            [
                "df2d7fa5.b7883"
            ]
        ]
    },
    {
        "id": "df2d7fa5.b7883",
        "type": "ui_numeric",
        "z": "7f292261.86badc",
        "name": "",
        "label": "Ki",
        "tooltip": "",
        "group": "99bd808a.f2698",
        "order": 7,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "99.8",
        "step": "0.1",
        "x": 390,
        "y": 551,
        "wires": [
            [
                "fd6740f1.e7f9b"
            ]
        ]
    },
    {
        "id": "fd6740f1.e7f9b",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::i",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 551,
        "wires": [
            []
        ]
    },
    {
        "id": "9f3a3f7b.40e82",
        "type": "inject",
        "z": "7f292261.86badc",
        "name": "Default D",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 240,
        "y": 591,
        "wires": [
            [
                "3d4988be.ec42e8"
            ]
        ]
    },
    {
        "id": "3d4988be.ec42e8",
        "type": "ui_numeric",
        "z": "7f292261.86badc",
        "name": "",
        "label": "Kd",
        "tooltip": "",
        "group": "99bd808a.f2698",
        "order": 9,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "x": 390,
        "y": 591,
        "wires": [
            [
                "99ffbc77.7eb54"
            ]
        ]
    },
    {
        "id": "99ffbc77.7eb54",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::d",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 591,
        "wires": [
            []
        ]
    },
    {
        "id": "bfcc57a.4d54ca8",
        "type": "inject",
        "z": "921f2684.926868",
        "name": "Default P",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "43",
        "payloadType": "num",
        "x": 245,
        "y": 510,
        "wires": [
            [
                "182dd5b8.7a207a"
            ]
        ]
    },
    {
        "id": "182dd5b8.7a207a",
        "type": "ui_numeric",
        "z": "921f2684.926868",
        "name": "",
        "label": "K𝗉",
        "tooltip": "",
        "group": "96ccbe54.5ee14",
        "order": 5,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "99.8",
        "step": "0.1",
        "x": 395,
        "y": 510,
        "wires": [
            [
                "22e3e463.43169c"
            ]
        ]
    },
    {
        "id": "22e3e463.43169c",
        "type": "change",
        "z": "921f2684.926868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::p",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 545,
        "y": 510,
        "wires": [
            []
        ]
    },
    {
        "id": "5ecbe4c8.acc4fc",
        "type": "inject",
        "z": "921f2684.926868",
        "name": "Default I",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.15",
        "payloadType": "num",
        "x": 245,
        "y": 550,
        "wires": [
            [
                "c40c5d70.84bb5"
            ]
        ]
    },
    {
        "id": "c40c5d70.84bb5",
        "type": "ui_numeric",
        "z": "921f2684.926868",
        "name": "",
        "label": "Ki",
        "tooltip": "",
        "group": "96ccbe54.5ee14",
        "order": 7,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "99.8",
        "step": "0.1",
        "x": 395,
        "y": 550,
        "wires": [
            [
                "ba342e42.2d812"
            ]
        ]
    },
    {
        "id": "ba342e42.2d812",
        "type": "change",
        "z": "921f2684.926868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::i",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 545,
        "y": 550,
        "wires": [
            []
        ]
    },
    {
        "id": "42407079.ae388",
        "type": "inject",
        "z": "921f2684.926868",
        "name": "Default D",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 245,
        "y": 590,
        "wires": [
            [
                "ecbf8e29.aa98e"
            ]
        ]
    },
    {
        "id": "ecbf8e29.aa98e",
        "type": "ui_numeric",
        "z": "921f2684.926868",
        "name": "",
        "label": "Kd",
        "tooltip": "",
        "group": "96ccbe54.5ee14",
        "order": 9,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "99.8",
        "step": "0.1",
        "x": 395,
        "y": 590,
        "wires": [
            [
                "55db0df6.f36eb4"
            ]
        ]
    },
    {
        "id": "55db0df6.f36eb4",
        "type": "change",
        "z": "921f2684.926868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::d",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 545,
        "y": 590,
        "wires": [
            []
        ]
    },
    {
        "id": "ae9e02d6.4b8b1",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "HLT PID temperature input",
        "links": [
            "536be9dd.80ff78"
        ],
        "x": 195,
        "y": 180,
        "wires": [
            [
                "d49bad46.9a18",
                "da134340.53908",
                "811c4d1.d4b10b"
            ]
        ]
    },
    {
        "id": "d49bad46.9a18",
        "type": "change",
        "z": "921f2684.926868",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp-HLT",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "da134340.53908",
        "type": "switch",
        "z": "921f2684.926868",
        "name": "hlt_on",
        "property": "hlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 246,
        "wires": [
            [
                "b97540b.33e39c"
            ]
        ]
    },
    {
        "id": "b97540b.33e39c",
        "type": "switch",
        "z": "921f2684.926868",
        "name": "hlt_pid switch",
        "property": "hlt_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 246,
        "wires": [
            [
                "40379b24.2791b4"
            ],
            [
                "cd9f2f9e.a980a"
            ]
        ]
    },
    {
        "id": "40379b24.2791b4",
        "type": "function",
        "z": "921f2684.926868",
        "name": "HLT PID Control",
        "func": "// Note that the algorithm provided below assumes a 1 second iteration time\n// Justin Angevaare\n// May 2018\n\n// Set temperature\nmsg.topic = \"PID-HLT-main-loop\";\nmsg.target =  global.get('hlt_target', 'storeInFile');\nmsg.temperature =  msg.payload;\n// Well that node doesn't work... do manually\nmsg.interval = 2000\n\n// Calculate error\nmsg.error = global.get('hlt_target', 'storeInFile') - msg.temperature;\n\n// Set output max\nmsg.max_output = 100\n\n// Calculate proportional action\nvar pTerm = msg.error * flow.get('p', 'storeInFile');\n\n// Calculate intergral action\nvar iTerm = 0;\nif (pTerm < msg.max_output) {\n    // Calculate integrator max\n    msg.integrator_max = msg.max_output/flow.get('i', 'storeInFile');\n    \n    // Update integrator\n    // For purposes of integrator, bound error by [-1, 1]\n    msg.integrator = flow.get('integrator');\n    msg.integrator += (msg.interval/1000) * Math.max(Math.min(msg.error, 1), -1);\n    \n    // Bound total integrator by absolute maximum\n    msg.integrator = Math.max(Math.min(msg.integrator, msg.integrator_max), -msg.integrator_max);\n    \n    // Output updated integrator to flow context\n    flow.set('integrator', msg.integrator);\n    \n    iTerm = msg.integrator * flow.get('i', 'storeInFile');\n}\n\n// Calculate derivative action\nmsg.derivative = (msg.error - flow.get('last_error'))/(msg.interval/1000);\nvar dTerm = msg.derivative * flow.get('d', 'storeInFile');\n\nmsg.output = pTerm + iTerm + dTerm;\n//node.warn(pTerm + ' ' + iTerm + ' ' + dTerm);\n// Bound output by [0, max_output]\nmsg.output = Math.max(Math.min(msg.output, msg.max_output), 0);\n\n// Output updated last_error to flow context\nmsg.last_error = msg.error;\nflow.set('last_error', msg.last_error);\n\n// Set payload to element output\nmsg.payload = msg.output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 226,
        "wires": [
            [
                "caeb268c.03fe38",
                "2e0c7253.c2e51e"
            ]
        ]
    },
    {
        "id": "cd9f2f9e.a980a",
        "type": "change",
        "z": "921f2684.926868",
        "name": "payload = hlt_manual_duty",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::hlt_manual_duty",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 266,
        "wires": [
            [
                "caeb268c.03fe38"
            ]
        ]
    },
    {
        "id": "caeb268c.03fe38",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "PID or Manual Duty",
        "links": [
            "65e8903.19f8f7",
            "8433ff20.b87b7"
        ],
        "x": 955,
        "y": 246,
        "wires": []
    },
    {
        "id": "2e0c7253.c2e51e",
        "type": "link out",
        "z": "921f2684.926868",
        "name": "HLT PID display",
        "links": [
            "96d96784.4bfff8"
        ],
        "x": 955,
        "y": 186,
        "wires": []
    },
    {
        "id": "65e8903.19f8f7",
        "type": "link in",
        "z": "696aae1c.d3b45",
        "name": "HLT GPIO",
        "links": [
            "4f2c006c.61798",
            "caeb268c.03fe38"
        ],
        "x": 255,
        "y": 200,
        "wires": [
            [
                "f389a098.7537c",
                "31854d6c.1a0362"
            ]
        ]
    },
    {
        "id": "8f5737fb.d94198",
        "type": "ui_gauge",
        "z": "696aae1c.d3b45",
        "name": "HLT Duty Gauge",
        "group": "a0e00a00.81b428",
        "order": 1,
        "width": "6",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "usage",
        "format": "{{payload | number:1}} kW",
        "min": 0,
        "max": "2.4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "1a366a91.8afb65",
        "type": "link in",
        "z": "696aae1c.d3b45",
        "name": "MLT GPIO",
        "links": [
            "25238ad5.78f756",
            "db6261df.6f1e"
        ],
        "x": 215,
        "y": 480,
        "wires": [
            [
                "ec370d50.dc2eb",
                "d0223b4.d1222c8"
            ]
        ]
    },
    {
        "id": "f0d7b6c7.05c6d8",
        "type": "ui_gauge",
        "z": "696aae1c.d3b45",
        "name": "MLT Duty Gauge",
        "group": "ea5e6691.a9d4b8",
        "order": 1,
        "width": "6",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "usage",
        "format": "{{payload | number:1}} kW",
        "min": 0,
        "max": "2.4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "da29ca33.74a648",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "PID button",
        "links": [
            "4a5bf6be.6e1108",
            "1e7696b3.a02b79",
            "3c2c2108.4a26ae",
            "a1b43cfd.c7958"
        ],
        "x": 295,
        "y": 827,
        "wires": [
            [
                "73e65d27.639804"
            ]
        ]
    },
    {
        "id": "73e65d27.639804",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_pid, mlt_try = true",
        "rules": [
            {
                "t": "set",
                "p": "mlt_pid",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "mlt_try",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 827,
        "wires": [
            [
                "2d87ea85.a8b8e6"
            ]
        ]
    },
    {
        "id": "c39524d4.f23948",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_on = mlt_try",
        "rules": [
            {
                "t": "set",
                "p": "mlt_on",
                "pt": "global",
                "to": "mlt_try",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 787,
        "wires": [
            [
                "64b3e3aa.1cd0bc"
            ]
        ]
    },
    {
        "id": "64b3e3aa.1cd0bc",
        "type": "switch",
        "z": "7f292261.86badc",
        "name": "hlt_on",
        "property": "hlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 887,
        "wires": [
            [
                "b81fb03e.ba29e"
            ],
            [
                "983f9689.8f1728"
            ]
        ]
    },
    {
        "id": "b81fb03e.ba29e",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_lock=true",
        "rules": [
            {
                "t": "set",
                "p": "mlt_lock",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 882,
        "wires": [
            []
        ]
    },
    {
        "id": "983f9689.8f1728",
        "type": "delay",
        "z": "7f292261.86badc",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 980,
        "y": 927,
        "wires": [
            [
                "f7d36baf.eee6e8"
            ]
        ]
    },
    {
        "id": "f7d36baf.eee6e8",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_lock = false",
        "rules": [
            {
                "t": "set",
                "p": "mlt_lock",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 967,
        "wires": [
            []
        ]
    },
    {
        "id": "2d87ea85.a8b8e6",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT Try Output",
        "links": [
            "907a2e94.cd0b"
        ],
        "x": 615,
        "y": 827,
        "wires": []
    },
    {
        "id": "907a2e94.cd0b",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "MLT Try Input",
        "links": [
            "2d87ea85.a8b8e6",
            "9ab1b45e.35ad18",
            "b5b6d747.d71dd8"
        ],
        "x": 695,
        "y": 787,
        "wires": [
            [
                "c39524d4.f23948"
            ]
        ]
    },
    {
        "id": "16f4f7a.243c108",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Off button",
        "links": [
            "6498be43.85193"
        ],
        "x": 295,
        "y": 748,
        "wires": [
            [
                "b5368e48.9217c"
            ]
        ]
    },
    {
        "id": "b5368e48.9217c",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_pid, mlt_try = false",
        "rules": [
            {
                "t": "set",
                "p": "mlt_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "mlt_try",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 748,
        "wires": [
            [
                "9ab1b45e.35ad18"
            ]
        ]
    },
    {
        "id": "9ab1b45e.35ad18",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT Try Output",
        "links": [
            "907a2e94.cd0b"
        ],
        "x": 615,
        "y": 748,
        "wires": []
    },
    {
        "id": "a6dd2f13.0d289",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Manual button",
        "links": [
            "fb7b2f6.88b6fd"
        ],
        "x": 295,
        "y": 787,
        "wires": [
            [
                "b0ad9919.d18af8"
            ]
        ]
    },
    {
        "id": "b0ad9919.d18af8",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_pid = false, mlt_try = true",
        "rules": [
            {
                "t": "set",
                "p": "mlt_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "mlt_try",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 787,
        "wires": [
            [
                "b5b6d747.d71dd8"
            ]
        ]
    },
    {
        "id": "b5b6d747.d71dd8",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT Try Output",
        "links": [
            "907a2e94.cd0b"
        ],
        "x": 615,
        "y": 787,
        "wires": []
    },
    {
        "id": "de4b9fb6.c35af",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Manual button",
        "links": [
            "fb7b2f6.88b6fd"
        ],
        "x": 295,
        "y": 867,
        "wires": [
            [
                "84e339de.b7a688"
            ]
        ]
    },
    {
        "id": "84e339de.b7a688",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "Zero everything",
        "rules": [
            {
                "t": "set",
                "p": "last_error",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "integrator",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "derivative",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "last_error",
                "pt": "flow",
                "to": "last_error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "integrator",
                "pt": "flow",
                "to": "integrator",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "output",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "target",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 907,
        "wires": [
            [
                "229a3cf1.42d594"
            ]
        ]
    },
    {
        "id": "229a3cf1.42d594",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT PID display",
        "links": [
            "297a459b.f41f0a"
        ],
        "x": 585,
        "y": 907,
        "wires": []
    },
    {
        "id": "ab05e41b.4e5e18",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Off Button",
        "links": [
            "d55bf56a.e4b388",
            "6498be43.85193"
        ],
        "x": 295,
        "y": 907,
        "wires": [
            [
                "84e339de.b7a688"
            ]
        ]
    },
    {
        "id": "cb032685.6e71e8",
        "type": "inject",
        "z": "7f292261.86badc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 651,
        "wires": [
            [
                "d55bf56a.e4b388"
            ]
        ]
    },
    {
        "id": "d55bf56a.e4b388",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "Off button - initialization",
        "links": [
            "43e5e2bc.3696ac",
            "ab05e41b.4e5e18",
            "f9e8571.11e75a8"
        ],
        "x": 355,
        "y": 651,
        "wires": []
    },
    {
        "id": "43e5e2bc.3696ac",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Off button - initialization",
        "links": [
            "d55bf56a.e4b388"
        ],
        "x": 295,
        "y": 707,
        "wires": [
            [
                "f46bfec5.b6d8b"
            ]
        ]
    },
    {
        "id": "f46bfec5.b6d8b",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "mlt_lock, mlt_on, mlt_pid, mlt_try = false",
        "rules": [
            {
                "t": "set",
                "p": "mlt_lock",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "mlt_on",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "mlt_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "mlt_try",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 707,
        "wires": [
            []
        ]
    },
    {
        "id": "f9e8571.11e75a8",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Off button",
        "links": [
            "d55bf56a.e4b388",
            "6498be43.85193"
        ],
        "x": 295,
        "y": 1007,
        "wires": [
            [
                "40f22576.cd544c"
            ]
        ]
    },
    {
        "id": "40f22576.cd544c",
        "type": "change",
        "z": "7f292261.86badc",
        "name": "payload = 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1007,
        "wires": [
            [
                "25238ad5.78f756"
            ]
        ]
    },
    {
        "id": "25238ad5.78f756",
        "type": "link out",
        "z": "7f292261.86badc",
        "name": "MLT Off Duty",
        "links": [
            "1a366a91.8afb65",
            "8433ff20.b87b7"
        ],
        "x": 595,
        "y": 1007,
        "wires": []
    },
    {
        "id": "ca5a6e5d.69d96",
        "type": "ui_button",
        "z": "20e5f99d.45d096",
        "name": "",
        "group": "ea5e6691.a9d4b8",
        "order": 7,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "PID",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 330,
        "y": 80,
        "wires": [
            [
                "4a5bf6be.6e1108"
            ]
        ]
    },
    {
        "id": "2ba783c9.c0a2dc",
        "type": "ui_button",
        "z": "20e5f99d.45d096",
        "name": "",
        "group": "ea5e6691.a9d4b8",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Manual",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 340,
        "y": 120,
        "wires": [
            [
                "fb7b2f6.88b6fd"
            ]
        ]
    },
    {
        "id": "3f2049be.7c8966",
        "type": "ui_button",
        "z": "20e5f99d.45d096",
        "name": "",
        "group": "ea5e6691.a9d4b8",
        "order": 9,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "6498be43.85193"
            ]
        ]
    },
    {
        "id": "4a5bf6be.6e1108",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "MLT PID Button State",
        "links": [
            "b38eee23.f828",
            "c8bfabee.1f5718",
            "da29ca33.74a648",
            "f865cf26.9d866"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "fb7b2f6.88b6fd",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "MLT Manual Button State",
        "links": [
            "a6dd2f13.0d289",
            "b38eee23.f828",
            "c8bfabee.1f5718",
            "de4b9fb6.c35af",
            "f865cf26.9d866"
        ],
        "x": 475,
        "y": 120,
        "wires": []
    },
    {
        "id": "6498be43.85193",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "MLT Off Button State",
        "links": [
            "16f4f7a.243c108",
            "ab05e41b.4e5e18",
            "f9e8571.11e75a8",
            "f865cf26.9d866",
            "c8bfabee.1f5718",
            "b38eee23.f828"
        ],
        "x": 475,
        "y": 160,
        "wires": []
    },
    {
        "id": "f865cf26.9d866",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT PID Button State",
        "links": [
            "4a5bf6be.6e1108",
            "fb7b2f6.88b6fd",
            "6498be43.85193"
        ],
        "x": 235,
        "y": 340,
        "wires": [
            [
                "139a611f.bb220f"
            ]
        ]
    },
    {
        "id": "139a611f.bb220f",
        "type": "delay",
        "z": "20e5f99d.45d096",
        "name": "PID Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "630b4f12.861e5"
            ]
        ]
    },
    {
        "id": "630b4f12.861e5",
        "type": "switch",
        "z": "20e5f99d.45d096",
        "name": "",
        "property": "mlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "37b3228f.0cb67e"
            ],
            [
                "b87b83b2.8b478"
            ]
        ]
    },
    {
        "id": "37b3228f.0cb67e",
        "type": "switch",
        "z": "20e5f99d.45d096",
        "name": "",
        "property": "mlt_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "56e97005.4b862"
            ],
            [
                "b87b83b2.8b478"
            ]
        ]
    },
    {
        "id": "56e97005.4b862",
        "type": "change",
        "z": "20e5f99d.45d096",
        "name": "mlt PID on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 340,
        "wires": [
            [
                "afbbd682.a2e8c8"
            ]
        ]
    },
    {
        "id": "b87b83b2.8b478",
        "type": "change",
        "z": "20e5f99d.45d096",
        "name": "mlt PID off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 380,
        "wires": [
            [
                "afbbd682.a2e8c8"
            ]
        ]
    },
    {
        "id": "afbbd682.a2e8c8",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "MLT PID button colour",
        "links": [
            "91f0690c.ce7f78"
        ],
        "x": 875,
        "y": 360,
        "wires": []
    },
    {
        "id": "91f0690c.ce7f78",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT PID button colour",
        "links": [
            "afbbd682.a2e8c8"
        ],
        "x": 235,
        "y": 80,
        "wires": [
            [
                "ca5a6e5d.69d96"
            ]
        ]
    },
    {
        "id": "c8bfabee.1f5718",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT Manual Button State",
        "links": [
            "4a5bf6be.6e1108",
            "fb7b2f6.88b6fd",
            "6498be43.85193"
        ],
        "x": 235,
        "y": 460,
        "wires": [
            [
                "1d4f3a88.e45ab5"
            ]
        ]
    },
    {
        "id": "1d4f3a88.e45ab5",
        "type": "delay",
        "z": "20e5f99d.45d096",
        "name": "Manual Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 370,
        "y": 460,
        "wires": [
            [
                "27f765e4.e7458a"
            ]
        ]
    },
    {
        "id": "27f765e4.e7458a",
        "type": "switch",
        "z": "20e5f99d.45d096",
        "name": "",
        "property": "mlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 500,
        "wires": [
            [
                "3176a74.5b39258"
            ],
            [
                "9dc9920f.bb4a9"
            ]
        ]
    },
    {
        "id": "3176a74.5b39258",
        "type": "switch",
        "z": "20e5f99d.45d096",
        "name": "",
        "property": "mlt_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "99723f7b.8ad2f"
            ],
            [
                "9dc9920f.bb4a9"
            ]
        ]
    },
    {
        "id": "99723f7b.8ad2f",
        "type": "change",
        "z": "20e5f99d.45d096",
        "name": "mlt manual on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 460,
        "wires": [
            [
                "3f92f677.131ffa"
            ]
        ]
    },
    {
        "id": "9dc9920f.bb4a9",
        "type": "change",
        "z": "20e5f99d.45d096",
        "name": "mlt manual off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 500,
        "wires": [
            [
                "3f92f677.131ffa"
            ]
        ]
    },
    {
        "id": "3f92f677.131ffa",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "MLT Manual button colour",
        "links": [
            "fc11446f.e1f658"
        ],
        "x": 895,
        "y": 480,
        "wires": []
    },
    {
        "id": "b38eee23.f828",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT Off Button State",
        "links": [
            "4a5bf6be.6e1108",
            "fb7b2f6.88b6fd",
            "6498be43.85193"
        ],
        "x": 235,
        "y": 560,
        "wires": [
            [
                "b3269c7e.c25d7"
            ]
        ]
    },
    {
        "id": "b3269c7e.c25d7",
        "type": "delay",
        "z": "20e5f99d.45d096",
        "name": "Off Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 350,
        "y": 560,
        "wires": [
            [
                "c8c7b191.16bfb"
            ]
        ]
    },
    {
        "id": "c8c7b191.16bfb",
        "type": "switch",
        "z": "20e5f99d.45d096",
        "name": "",
        "property": "mlt_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 600,
        "wires": [
            [
                "28c2aca7.1eb664"
            ],
            [
                "e965c812.d7e488"
            ]
        ]
    },
    {
        "id": "28c2aca7.1eb664",
        "type": "change",
        "z": "20e5f99d.45d096",
        "name": "mlt Off on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 580,
        "wires": [
            [
                "16cdf3af.bf21ec"
            ]
        ]
    },
    {
        "id": "e965c812.d7e488",
        "type": "change",
        "z": "20e5f99d.45d096",
        "name": "mlt Off off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 620,
        "wires": [
            [
                "16cdf3af.bf21ec"
            ]
        ]
    },
    {
        "id": "16cdf3af.bf21ec",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "MLT Off button colour",
        "links": [
            "7e5d833e.296d0c"
        ],
        "x": 715,
        "y": 600,
        "wires": []
    },
    {
        "id": "2c91b3a7.475ddc",
        "type": "ui_ui_control",
        "z": "20e5f99d.45d096",
        "name": "Dashboard connection",
        "events": "all",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "3f4d200a.e3ad2"
            ]
        ]
    },
    {
        "id": "3f4d200a.e3ad2",
        "type": "link out",
        "z": "20e5f99d.45d096",
        "name": "Off button - initialization",
        "links": [
            "1c9f5264.4c070e",
            "d7617024.f5491",
            "fa4a67d3.33b0c8",
            "7f6b35be.9793fc"
        ],
        "x": 485,
        "y": 240,
        "wires": []
    },
    {
        "id": "fa4a67d3.33b0c8",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT PID Button initialization",
        "links": [
            "3f4d200a.e3ad2"
        ],
        "x": 235,
        "y": 380,
        "wires": [
            [
                "630b4f12.861e5"
            ]
        ]
    },
    {
        "id": "d7617024.f5491",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT Manual Button initialization",
        "links": [
            "3f4d200a.e3ad2"
        ],
        "x": 235,
        "y": 500,
        "wires": [
            [
                "27f765e4.e7458a"
            ]
        ]
    },
    {
        "id": "1c9f5264.4c070e",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "MLT Off Button initialization",
        "links": [
            "3f4d200a.e3ad2"
        ],
        "x": 235,
        "y": 600,
        "wires": [
            [
                "c8c7b191.16bfb"
            ]
        ]
    },
    {
        "id": "fc11446f.e1f658",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "HLT Manual button colour",
        "links": [
            "3f92f677.131ffa"
        ],
        "x": 235,
        "y": 120,
        "wires": [
            [
                "2ba783c9.c0a2dc"
            ]
        ]
    },
    {
        "id": "7e5d833e.296d0c",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "HLT Off button colour",
        "links": [
            "16cdf3af.bf21ec"
        ],
        "x": 235,
        "y": 160,
        "wires": [
            [
                "3f2049be.7c8966"
            ]
        ]
    },
    {
        "id": "1c912274.2c21ae",
        "type": "link in",
        "z": "c3bfffec.8ad98",
        "name": "MLT PID display",
        "links": [
            "bac69bc7.32fe18"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "5d2d2c38.44a8e4",
                "a7b9760f.74dfc8",
                "cbf423a1.d16b9"
            ]
        ]
    },
    {
        "id": "5d2d2c38.44a8e4",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "99bd808a.f2698",
        "order": 6,
        "width": 2,
        "height": 1,
        "name": "MLT PID Error",
        "label": "Error",
        "format": "{{last_error | number:1}}°C",
        "layout": "row-spread",
        "x": 350,
        "y": 180,
        "wires": []
    },
    {
        "id": "a7b9760f.74dfc8",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "99bd808a.f2698",
        "order": 8,
        "width": 2,
        "height": 1,
        "name": "MLT PID Integrator",
        "label": "Integral",
        "format": "{{integrator | number:1}}°C⦁s",
        "layout": "row-spread",
        "x": 360,
        "y": 220,
        "wires": []
    },
    {
        "id": "cbf423a1.d16b9",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "99bd808a.f2698",
        "order": 10,
        "width": 2,
        "height": 1,
        "name": "MLT PID Derivative",
        "label": "Derivative",
        "format": "{{derivative | number:1}}°C/s",
        "layout": "row-spread",
        "x": 360,
        "y": 260,
        "wires": []
    },
    {
        "id": "e8739f51.73062",
        "type": "link in",
        "z": "c3bfffec.8ad98",
        "name": "BK PID display",
        "links": [
            "35799339.5e169c"
        ],
        "x": 195,
        "y": 360,
        "wires": [
            [
                "8bdf396b.fa7e18",
                "f9481135.cfc5e",
                "ae6031ba.3fe0f"
            ]
        ]
    },
    {
        "id": "8bdf396b.fa7e18",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "e71aa9ca.9bbda8",
        "order": 5,
        "width": 2,
        "height": 1,
        "name": "BK PID Error",
        "label": "Error",
        "format": "{{last_error | number:1}}°C",
        "layout": "row-spread",
        "x": 340,
        "y": 320,
        "wires": []
    },
    {
        "id": "f9481135.cfc5e",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "e71aa9ca.9bbda8",
        "order": 7,
        "width": 2,
        "height": 1,
        "name": "BK PID Integrator",
        "label": "Integral",
        "format": "{{integrator | number:1}}°C⦁s",
        "layout": "row-spread",
        "x": 360,
        "y": 360,
        "wires": []
    },
    {
        "id": "ae6031ba.3fe0f",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "e71aa9ca.9bbda8",
        "order": 9,
        "width": 2,
        "height": 1,
        "name": "BK PID Derivative",
        "label": "Derivative",
        "format": "{{derivative | number:1}}°C/s",
        "layout": "row-spread",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "96d96784.4bfff8",
        "type": "link in",
        "z": "c3bfffec.8ad98",
        "name": "HLT PID display",
        "links": [
            "2e0c7253.c2e51e"
        ],
        "x": 195,
        "y": 80,
        "wires": [
            [
                "13e57a57.a47aa6",
                "24e63f44.8fd9d",
                "3276ae0b.b96a72"
            ]
        ]
    },
    {
        "id": "13e57a57.a47aa6",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "96ccbe54.5ee14",
        "order": 6,
        "width": 2,
        "height": 1,
        "name": "HLT PID Error",
        "label": "Error",
        "format": "{{last_error | number:1}}°C",
        "layout": "row-spread",
        "x": 350,
        "y": 40,
        "wires": []
    },
    {
        "id": "24e63f44.8fd9d",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "96ccbe54.5ee14",
        "order": 8,
        "width": 2,
        "height": 1,
        "name": "HLT PID Integrator",
        "label": "Integral",
        "format": "{{integrator | number:1}}°C⦁s",
        "layout": "row-spread",
        "x": 360,
        "y": 80,
        "wires": []
    },
    {
        "id": "3276ae0b.b96a72",
        "type": "ui_text",
        "z": "c3bfffec.8ad98",
        "group": "96ccbe54.5ee14",
        "order": 10,
        "width": 2,
        "height": 1,
        "name": "HLT PID Derivative",
        "label": "Derivative",
        "format": "{{derivative | number:1}}°C/s",
        "layout": "row-spread",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "1bfa54fc.6b555b",
        "type": "link in",
        "z": "921f2684.926868",
        "name": "HLT PID button",
        "links": [
            "e674e86.07bc118"
        ],
        "x": 301,
        "y": 850,
        "wires": [
            [
                "469ea3b5.98e8dc"
            ]
        ]
    },
    {
        "id": "c639fd69.8ad89",
        "type": "ui_button",
        "z": "bc06885f.8d8148",
        "name": "",
        "group": "9d59abb0.326b08",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "PID",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "5ebb22ba.77a06c"
            ]
        ]
    },
    {
        "id": "f481b3eb.0e596",
        "type": "ui_button",
        "z": "bc06885f.8d8148",
        "name": "",
        "group": "9d59abb0.326b08",
        "order": 9,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Manual",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "a1d6ac13.d6f75"
            ]
        ]
    },
    {
        "id": "f6d1bd88.dd031",
        "type": "ui_button",
        "z": "bc06885f.8d8148",
        "name": "",
        "group": "9d59abb0.326b08",
        "order": 10,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "47be6372.5f661c"
            ]
        ]
    },
    {
        "id": "5ebb22ba.77a06c",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "BK PID Button State",
        "links": [
            "60bfcb5c.025064",
            "bd9694b8.3ebb48",
            "2cd8654b.39c13a",
            "6c67cf55.ef55e"
        ],
        "x": 435,
        "y": 80,
        "wires": []
    },
    {
        "id": "a1d6ac13.d6f75",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "BK Manual Button State",
        "links": [
            "dbde6681.3eb628",
            "e75b51c9.c7ea5",
            "bd9694b8.3ebb48",
            "2cd8654b.39c13a",
            "6c67cf55.ef55e"
        ],
        "x": 435,
        "y": 120,
        "wires": []
    },
    {
        "id": "47be6372.5f661c",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "BK Off Button State",
        "links": [
            "2cd8654b.39c13a",
            "436a459d.45dfec",
            "6c67cf55.ef55e",
            "6d273bd8.04c514",
            "b875aa94.3560b8",
            "bd9694b8.3ebb48"
        ],
        "x": 435,
        "y": 160,
        "wires": []
    },
    {
        "id": "bd9694b8.3ebb48",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK PID Button State",
        "links": [
            "47be6372.5f661c",
            "5ebb22ba.77a06c",
            "a1d6ac13.d6f75"
        ],
        "x": 195,
        "y": 340,
        "wires": [
            [
                "d086a627.07a418"
            ]
        ]
    },
    {
        "id": "d086a627.07a418",
        "type": "delay",
        "z": "bc06885f.8d8148",
        "name": "PID Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "57361001.0237f"
            ]
        ]
    },
    {
        "id": "57361001.0237f",
        "type": "switch",
        "z": "bc06885f.8d8148",
        "name": "",
        "property": "bk_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 380,
        "wires": [
            [
                "27ee6f41.9546e"
            ],
            [
                "9aa447b6.8527d8"
            ]
        ]
    },
    {
        "id": "27ee6f41.9546e",
        "type": "switch",
        "z": "bc06885f.8d8148",
        "name": "",
        "property": "bk_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 360,
        "wires": [
            [
                "6645ee2d.d50c2"
            ],
            [
                "9aa447b6.8527d8"
            ]
        ]
    },
    {
        "id": "6645ee2d.d50c2",
        "type": "change",
        "z": "bc06885f.8d8148",
        "name": "BK PID on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 340,
        "wires": [
            [
                "4211a37e.9ed7bc"
            ]
        ]
    },
    {
        "id": "9aa447b6.8527d8",
        "type": "change",
        "z": "bc06885f.8d8148",
        "name": "BK PID off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 380,
        "wires": [
            [
                "4211a37e.9ed7bc"
            ]
        ]
    },
    {
        "id": "4211a37e.9ed7bc",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "BK PID button colour",
        "links": [
            "cbface26.d2927"
        ],
        "x": 835,
        "y": 360,
        "wires": []
    },
    {
        "id": "cbface26.d2927",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK PID button colour",
        "links": [
            "4211a37e.9ed7bc"
        ],
        "x": 195,
        "y": 80,
        "wires": [
            [
                "c639fd69.8ad89"
            ]
        ]
    },
    {
        "id": "2cd8654b.39c13a",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK Manual Button State",
        "links": [
            "47be6372.5f661c",
            "5ebb22ba.77a06c",
            "a1d6ac13.d6f75"
        ],
        "x": 195,
        "y": 460,
        "wires": [
            [
                "2432e386.fc43fc"
            ]
        ]
    },
    {
        "id": "2432e386.fc43fc",
        "type": "delay",
        "z": "bc06885f.8d8148",
        "name": "Manual Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "ba948565.417b18"
            ]
        ]
    },
    {
        "id": "ba948565.417b18",
        "type": "switch",
        "z": "bc06885f.8d8148",
        "name": "",
        "property": "bk_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 500,
        "wires": [
            [
                "b8d7624d.29c04"
            ],
            [
                "13a55cce.3771f3"
            ]
        ]
    },
    {
        "id": "b8d7624d.29c04",
        "type": "switch",
        "z": "bc06885f.8d8148",
        "name": "",
        "property": "bk_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "cdd78f9f.5afbe"
            ],
            [
                "13a55cce.3771f3"
            ]
        ]
    },
    {
        "id": "cdd78f9f.5afbe",
        "type": "change",
        "z": "bc06885f.8d8148",
        "name": "BK manual on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "d56f2e16.65b5c"
            ]
        ]
    },
    {
        "id": "13a55cce.3771f3",
        "type": "change",
        "z": "bc06885f.8d8148",
        "name": "BK manual off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 500,
        "wires": [
            [
                "d56f2e16.65b5c"
            ]
        ]
    },
    {
        "id": "d56f2e16.65b5c",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "BK Manual button colour",
        "links": [
            "83bda46a.a3a978"
        ],
        "x": 855,
        "y": 480,
        "wires": []
    },
    {
        "id": "6c67cf55.ef55e",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK Off Button State",
        "links": [
            "47be6372.5f661c",
            "5ebb22ba.77a06c",
            "a1d6ac13.d6f75"
        ],
        "x": 195,
        "y": 560,
        "wires": [
            [
                "7575ff99.850e8"
            ]
        ]
    },
    {
        "id": "7575ff99.850e8",
        "type": "delay",
        "z": "bc06885f.8d8148",
        "name": "Off Delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 310,
        "y": 560,
        "wires": [
            [
                "bd730949.04f718"
            ]
        ]
    },
    {
        "id": "bd730949.04f718",
        "type": "switch",
        "z": "bc06885f.8d8148",
        "name": "",
        "property": "bk_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 600,
        "wires": [
            [
                "dc8fb8c.8f09e48"
            ],
            [
                "ca8f4ef4.9f398"
            ]
        ]
    },
    {
        "id": "dc8fb8c.8f09e48",
        "type": "change",
        "z": "bc06885f.8d8148",
        "name": "bk Off on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 580,
        "wires": [
            [
                "7f88982.76c6468"
            ]
        ]
    },
    {
        "id": "ca8f4ef4.9f398",
        "type": "change",
        "z": "bc06885f.8d8148",
        "name": "bk Off off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#424242",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 620,
        "wires": [
            [
                "7f88982.76c6468"
            ]
        ]
    },
    {
        "id": "7f88982.76c6468",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "BK Off button colour",
        "links": [
            "da182aa8.9c2348"
        ],
        "x": 675,
        "y": 600,
        "wires": []
    },
    {
        "id": "d6e37837.52d078",
        "type": "ui_ui_control",
        "z": "bc06885f.8d8148",
        "name": "Dashboard connection",
        "events": "all",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "5afbb318.65587c"
            ]
        ]
    },
    {
        "id": "5afbb318.65587c",
        "type": "link out",
        "z": "bc06885f.8d8148",
        "name": "Off button - initialization",
        "links": [
            "92a7063d.ec6ef8",
            "bb3098e7.1d62e8",
            "d9ed449.051e0b8"
        ],
        "x": 445,
        "y": 240,
        "wires": []
    },
    {
        "id": "92a7063d.ec6ef8",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK PID Button initialization",
        "links": [
            "5afbb318.65587c"
        ],
        "x": 195,
        "y": 380,
        "wires": [
            [
                "57361001.0237f"
            ]
        ]
    },
    {
        "id": "bb3098e7.1d62e8",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK Manual Button initialization",
        "links": [
            "5afbb318.65587c"
        ],
        "x": 195,
        "y": 500,
        "wires": [
            [
                "ba948565.417b18"
            ]
        ]
    },
    {
        "id": "d9ed449.051e0b8",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK Off Button initialization",
        "links": [
            "5afbb318.65587c"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "bd730949.04f718"
            ]
        ]
    },
    {
        "id": "83bda46a.a3a978",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK Manual button colour",
        "links": [
            "d56f2e16.65b5c"
        ],
        "x": 195,
        "y": 120,
        "wires": [
            [
                "f481b3eb.0e596"
            ]
        ]
    },
    {
        "id": "da182aa8.9c2348",
        "type": "link in",
        "z": "bc06885f.8d8148",
        "name": "BK Off button colour",
        "links": [
            "7f88982.76c6468"
        ],
        "x": 195,
        "y": 160,
        "wires": [
            [
                "f6d1bd88.dd031"
            ]
        ]
    },
    {
        "id": "237e62aa.3c31ce",
        "type": "inject",
        "z": "78e2f0b5.5a802",
        "name": "Default BK Target",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::bk_target",
        "payloadType": "global",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "d65af15e.7a91c",
                "76fa4d08.464e54",
                "68c04583.20dbbc"
            ]
        ]
    },
    {
        "id": "d65af15e.7a91c",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::bk_target",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "76fa4d08.464e54",
        "type": "ui_gauge",
        "z": "78e2f0b5.5a802",
        "name": "BK target temp",
        "group": "9d59abb0.326b08",
        "order": 3,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "Target Temp",
        "format": "{{value}}c",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "78",
        "x": 540,
        "y": 460,
        "wires": []
    },
    {
        "id": "ea3830cd.2dda",
        "type": "ui_text",
        "z": "78e2f0b5.5a802",
        "group": "e71aa9ca.9bbda8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Kettle target",
        "label": "Target",
        "format": "{{payload | number:1}}°C",
        "layout": "row-spread",
        "x": 550,
        "y": 500,
        "wires": []
    },
    {
        "id": "d4d48589.704b58",
        "type": "inject",
        "z": "78e2f0b5.5a802",
        "name": "Default Element Duty",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::bk_manual_duty",
        "payloadType": "flow",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "5255e2e3.2740fc",
                "d934cd31.c948d"
            ]
        ]
    },
    {
        "id": "5255e2e3.2740fc",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::bk_manual_duty",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3857893c.46b1c6",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "MLT PID temperature input",
        "links": [
            "c5bb895f.256208"
        ],
        "x": 235,
        "y": 140,
        "wires": [
            [
                "b8c055a5.cb5688",
                "2ba42757.3bd328",
                "6bd04cff.4d3574"
            ]
        ]
    },
    {
        "id": "b8c055a5.cb5688",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temp-BK",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2ba42757.3bd328",
        "type": "switch",
        "z": "78e2f0b5.5a802",
        "name": "bk_on",
        "property": "bk_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 200,
        "wires": [
            [
                "4e1d1dbb.a430c4"
            ]
        ]
    },
    {
        "id": "4e1d1dbb.a430c4",
        "type": "switch",
        "z": "78e2f0b5.5a802",
        "name": "bk_pid switch",
        "property": "bk_pid",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 200,
        "wires": [
            [
                "73537e2e.61989"
            ],
            [
                "1161b79c.017bd8"
            ]
        ]
    },
    {
        "id": "73537e2e.61989",
        "type": "function",
        "z": "78e2f0b5.5a802",
        "name": "BK PID Control",
        "func": "// Note that the algorithm provided below assumes a 1 second iteration time\n// Justin Angevaare\n// May 2018\n\n// Set temperature\nmsg.topic = \"PID-BK-main-loop\";\nmsg.target =  flow.get('bk_target', 'storeInFile');\nmsg.temperature =  msg.payload;\nnode.warn('Temp: ' + msg.payload);\n// Well that node doesn't work... do manually\nmsg.interval = 2000\n\n// Calculate error\nmsg.error = flow.get('bk_target', 'storeInFile') - msg.temperature;\n\n// Set output max\nmsg.max_output = 100\n\n// Calculate proportional action\nvar pTerm = msg.error * flow.get('p', 'storeInFile');\n\n// Calculate intergral action\nvar iTerm = 0;\n\nnode.log(pTerm + ' ' + msg.max_output);\n\nif (pTerm < msg.max_output) {\n    // Calculate integrator max\n    msg.integrator_max = msg.max_output/flow.get('i', 'storeInFile');\n    \n    // Update integrator\n    // For purposes of integrator, bound error by [-1, 1]\n    msg.integrator = flow.get('integrator');\n    msg.integrator += (msg.interval/1000) * Math.max(Math.min(msg.error, 1), -1);\n    \n    // Bound total integrator by absolute maximum\n    msg.integrator = Math.max(Math.min(msg.integrator, msg.integrator_max), -msg.integrator_max);\n    \n    // Output updated integrator to flow context\n    flow.set('integrator', msg.integrator);\n    \n    iTerm = msg.integrator * flow.get('i', 'storeInFile');\n}\n\n// Calculate derivative action\nmsg.derivative = (msg.error - flow.get('last_error'))/(msg.interval/1000);\nvar dTerm = msg.derivative * flow.get('d', 'storeInFile');\n\nmsg.output = pTerm + iTerm + dTerm;\nnode.warn(pTerm + ' ' + iTerm + ' ' + dTerm + ' ' + msg.integrator);\n// Bound output by [0, max_output]\nmsg.output = Math.max(Math.min(msg.output, msg.max_output), 0);\n\n// Output updated last_error to flow context\nmsg.last_error = msg.error;\nflow.set('last_error', msg.last_error);\n\n// Set payload to element output\nmsg.payload = msg.output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 879,
        "y": 180,
        "wires": [
            [
                "b851b80d.5ee1f8",
                "35799339.5e169c"
            ]
        ]
    },
    {
        "id": "1161b79c.017bd8",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "payload = mlt_manual_duty",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::bk_manual_duty",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 220,
        "wires": [
            [
                "b851b80d.5ee1f8"
            ]
        ]
    },
    {
        "id": "b851b80d.5ee1f8",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "MLT PID or Manual Duty",
        "links": [
            "3901073e.dc5ad8",
            "8433ff20.b87b7"
        ],
        "x": 1035,
        "y": 200,
        "wires": []
    },
    {
        "id": "35799339.5e169c",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "MLT PID display",
        "links": [
            "e8739f51.73062",
            "297a459b.f41f0a"
        ],
        "x": 1035,
        "y": 140,
        "wires": []
    },
    {
        "id": "1451a533.df3f8b",
        "type": "inject",
        "z": "78e2f0b5.5a802",
        "name": "Default P",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "43",
        "payloadType": "num",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "10083463.301dbc"
            ]
        ]
    },
    {
        "id": "10083463.301dbc",
        "type": "ui_numeric",
        "z": "78e2f0b5.5a802",
        "name": "",
        "label": "K𝗉",
        "tooltip": "",
        "group": "e71aa9ca.9bbda8",
        "order": 4,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "99.8",
        "step": "0.1",
        "x": 310,
        "y": 580,
        "wires": [
            [
                "c2dd518d.46a89"
            ]
        ]
    },
    {
        "id": "c2dd518d.46a89",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::p",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "39875bd7.6b2764",
        "type": "inject",
        "z": "78e2f0b5.5a802",
        "name": "Default I",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.15",
        "payloadType": "num",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "6ffd7729.de0428"
            ]
        ]
    },
    {
        "id": "6ffd7729.de0428",
        "type": "ui_numeric",
        "z": "78e2f0b5.5a802",
        "name": "",
        "label": "Ki",
        "tooltip": "",
        "group": "e71aa9ca.9bbda8",
        "order": 6,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "x": 310,
        "y": 620,
        "wires": [
            [
                "339488cc.a98998"
            ]
        ]
    },
    {
        "id": "339488cc.a98998",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::i",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8ff879a7.935878",
        "type": "inject",
        "z": "78e2f0b5.5a802",
        "name": "Default D",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "7f39978.3678768"
            ]
        ]
    },
    {
        "id": "7f39978.3678768",
        "type": "ui_numeric",
        "z": "78e2f0b5.5a802",
        "name": "",
        "label": "Kd",
        "tooltip": "",
        "group": "e71aa9ca.9bbda8",
        "order": 8,
        "width": "4",
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "100",
        "step": "0.1",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "cafdbc86.2132e"
            ]
        ]
    },
    {
        "id": "cafdbc86.2132e",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::d",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "60bfcb5c.025064",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "PID button",
        "links": [
            "5ebb22ba.77a06c"
        ],
        "x": 232,
        "y": 960,
        "wires": [
            [
                "bce0f22d.88c0a"
            ]
        ]
    },
    {
        "id": "bce0f22d.88c0a",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_pid, bk_try = true",
        "rules": [
            {
                "t": "set",
                "p": "bk_pid",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bk_try",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 377,
        "y": 960,
        "wires": [
            [
                "24f7d4d6.c64b4c"
            ]
        ]
    },
    {
        "id": "f81a8c48.939be",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_on = bk_try",
        "rules": [
            {
                "t": "set",
                "p": "bk_on",
                "pt": "global",
                "to": "bk_try",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 777,
        "y": 920,
        "wires": [
            [
                "b5b00fe2.def77"
            ]
        ]
    },
    {
        "id": "b5b00fe2.def77",
        "type": "switch",
        "z": "78e2f0b5.5a802",
        "name": "bk_on",
        "property": "bk_on",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 787,
        "y": 1020,
        "wires": [
            [
                "238238dd.2db8d8"
            ],
            [
                "ca1b3eb8.8869e"
            ]
        ]
    },
    {
        "id": "238238dd.2db8d8",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_lock=true",
        "rules": [
            {
                "t": "set",
                "p": "bk_lock",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1107,
        "y": 1015,
        "wires": [
            []
        ]
    },
    {
        "id": "ca1b3eb8.8869e",
        "type": "delay",
        "z": "78e2f0b5.5a802",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 937,
        "y": 1060,
        "wires": [
            [
                "84196cdb.7c231"
            ]
        ]
    },
    {
        "id": "84196cdb.7c231",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_lock = false",
        "rules": [
            {
                "t": "set",
                "p": "bk_lock",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1117,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "24f7d4d6.c64b4c",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "BK Try Output",
        "links": [
            "2a6bf115.dfc6ce"
        ],
        "x": 552,
        "y": 960,
        "wires": []
    },
    {
        "id": "2a6bf115.dfc6ce",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "BK Try Input",
        "links": [
            "24f7d4d6.c64b4c",
            "259ff7ed.c2c6c8",
            "400ab7b1.65a628"
        ],
        "x": 652,
        "y": 920,
        "wires": [
            [
                "f81a8c48.939be",
                "54c3102a.bf3af"
            ]
        ]
    },
    {
        "id": "6d273bd8.04c514",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "Off button",
        "links": [
            "47be6372.5f661c"
        ],
        "x": 232,
        "y": 881,
        "wires": [
            [
                "becc9684.471f08"
            ]
        ]
    },
    {
        "id": "becc9684.471f08",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_pid, bk_try = false",
        "rules": [
            {
                "t": "set",
                "p": "bk_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bk_try",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 377,
        "y": 881,
        "wires": [
            [
                "259ff7ed.c2c6c8"
            ]
        ]
    },
    {
        "id": "259ff7ed.c2c6c8",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "BK Try Output",
        "links": [
            "2a6bf115.dfc6ce"
        ],
        "x": 552,
        "y": 881,
        "wires": []
    },
    {
        "id": "dbde6681.3eb628",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "Manual button",
        "links": [
            "a1d6ac13.d6f75"
        ],
        "x": 232,
        "y": 920,
        "wires": [
            [
                "4386457c.4bcfbc"
            ]
        ]
    },
    {
        "id": "4386457c.4bcfbc",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_pid = false, bk_try = true",
        "rules": [
            {
                "t": "set",
                "p": "bk_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bk_try",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 397,
        "y": 920,
        "wires": [
            [
                "400ab7b1.65a628"
            ]
        ]
    },
    {
        "id": "400ab7b1.65a628",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "BK Try Output",
        "links": [
            "2a6bf115.dfc6ce"
        ],
        "x": 552,
        "y": 920,
        "wires": []
    },
    {
        "id": "e75b51c9.c7ea5",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "Manual button",
        "links": [
            "a1d6ac13.d6f75"
        ],
        "x": 232,
        "y": 1000,
        "wires": [
            [
                "1e1edf73.80b651"
            ]
        ]
    },
    {
        "id": "1e1edf73.80b651",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "Zero everything",
        "rules": [
            {
                "t": "set",
                "p": "last_error",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "integrator",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "derivative",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "last_error",
                "pt": "flow",
                "to": "last_error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "integrator",
                "pt": "flow",
                "to": "integrator",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "output",
                "pt": "msg",
                "to": "0.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "target",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 357,
        "y": 1040,
        "wires": [
            [
                "ef9de62d.c08a78"
            ]
        ]
    },
    {
        "id": "ef9de62d.c08a78",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "BK PID display",
        "links": [
            "297a459b.f41f0a"
        ],
        "x": 522,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b875aa94.3560b8",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "Off Button",
        "links": [
            "47be6372.5f661c",
            "777c3f1f.083ee"
        ],
        "x": 232,
        "y": 1040,
        "wires": [
            [
                "1e1edf73.80b651"
            ]
        ]
    },
    {
        "id": "40363430.7c705c",
        "type": "inject",
        "z": "78e2f0b5.5a802",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 720,
        "wires": [
            [
                "777c3f1f.083ee"
            ]
        ]
    },
    {
        "id": "777c3f1f.083ee",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "Off button - initialization",
        "links": [
            "cca3fbf8.0732f8",
            "b875aa94.3560b8",
            "436a459d.45dfec"
        ],
        "x": 275,
        "y": 720,
        "wires": []
    },
    {
        "id": "cca3fbf8.0732f8",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "Off button - initialization",
        "links": [
            "777c3f1f.083ee"
        ],
        "x": 232,
        "y": 840,
        "wires": [
            [
                "418d5df5.63fc24"
            ]
        ]
    },
    {
        "id": "418d5df5.63fc24",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "bk_lock, bk_on, bk_pid, bk_try = false",
        "rules": [
            {
                "t": "set",
                "p": "bk_lock",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bk_on",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bk_pid",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "bk_try",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 427,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "436a459d.45dfec",
        "type": "link in",
        "z": "78e2f0b5.5a802",
        "name": "Off button",
        "links": [
            "47be6372.5f661c",
            "777c3f1f.083ee"
        ],
        "x": 232,
        "y": 1140,
        "wires": [
            [
                "5d48f2c0.028e6c"
            ]
        ]
    },
    {
        "id": "5d48f2c0.028e6c",
        "type": "change",
        "z": "78e2f0b5.5a802",
        "name": "payload = 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 357,
        "y": 1140,
        "wires": [
            [
                "ca49e1a9.0c693"
            ]
        ]
    },
    {
        "id": "ca49e1a9.0c693",
        "type": "link out",
        "z": "78e2f0b5.5a802",
        "name": "BK Off Duty",
        "links": [
            "3901073e.dc5ad8",
            "8433ff20.b87b7"
        ],
        "x": 532,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3901073e.dc5ad8",
        "type": "link in",
        "z": "696aae1c.d3b45",
        "name": "BK GPIO",
        "links": [
            "b851b80d.5ee1f8",
            "ca49e1a9.0c693"
        ],
        "x": 275,
        "y": 700,
        "wires": [
            [
                "3891981c.59a838",
                "8aca9098.5ae53"
            ]
        ]
    },
    {
        "id": "490fe15a.3061a",
        "type": "ui_gauge",
        "z": "696aae1c.d3b45",
        "name": "BK Duty Gauge",
        "group": "9d59abb0.326b08",
        "order": 1,
        "width": "6",
        "height": "3",
        "gtype": "gage",
        "title": "",
        "label": "usage",
        "format": "{{payload | number:1}} kW",
        "min": 0,
        "max": "2.4",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 640,
        "y": 760,
        "wires": []
    },
    {
        "id": "df44bc03.72352",
        "type": "comment",
        "z": "c8b28591.06aa18",
        "name": "(c) 2020 Thomas Wenzlaff   www.wenzlaff.info",
        "info": "",
        "x": 750,
        "y": 40,
        "wires": []
    },
    {
        "id": "a6225ae4.c154a8",
        "type": "function",
        "z": "c8b28591.06aa18",
        "name": "minutes to seconds",
        "func": "\nvar sekunden = msg.payload * 60;\n\n// msg.ui_control = {\"min\":0,\"max\":10, \"seg1\":0, \"seg2\":1}\n\nmsg.payload=\"{\\\"payload\\\": \\\"on\\\", \\\"timeout\\\":\" + sekunden + \", \\\"warning\\\": 30}\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "85fa3da5.bf572",
        "type": "mytimeout",
        "z": "c8b28591.06aa18",
        "name": "1-10 Minutes timer",
        "outtopic": "",
        "outsafe": "",
        "outwarning": "30 seconds left",
        "outunsafe": "Timer completed",
        "warning": "10",
        "timer": "30",
        "debug": false,
        "ndebug": false,
        "ignoreCase": false,
        "repeat": false,
        "again": false,
        "x": 581,
        "y": 300,
        "wires": [
            [
                "b2e24b50.2cfba8",
                "13c27d7e.e9b583"
            ],
            [
                "77deece1.4bb584"
            ]
        ]
    },
    {
        "id": "1c4a8152.9f616f",
        "type": "ui_slider",
        "z": "c8b28591.06aa18",
        "name": "",
        "label": "Start",
        "tooltip": "",
        "group": "a4a3ad50.dc574",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "a6225ae4.c154a8"
            ]
        ]
    },
    {
        "id": "20435281.a5c23e",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "5 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 300, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "fb94a219.f8f06",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "10 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 600, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "c8a79e70.6a04d",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "15 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 900, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "244af22f.cf64de",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 5,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "20 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 1200, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 280,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "156c825f.e454ae",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 6,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "30 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 1800, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "2a5fe443.a97cdc",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 7,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "45 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 2700, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "2256683b.a7ccf8",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 8,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "60 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 3600, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 400,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "d1e2e7b4.04fc98",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "a4a3ad50.dc574",
        "order": 9,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "90 min",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-clock-o",
        "payload": "{ \"payload\": \"on\", \"timeout\": 5400, \"warning\": 60 }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 440,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "61c20d25.8c3474",
        "type": "ui_button",
        "z": "c8b28591.06aa18",
        "name": "",
        "group": "3a5d5e9b.7af2a2",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{ \"payload\": \"stop\" }",
        "payloadType": "str",
        "topic": "",
        "x": 230,
        "y": 480,
        "wires": [
            [
                "85fa3da5.bf572"
            ]
        ]
    },
    {
        "id": "22c3788.500c388",
        "type": "play audio",
        "z": "c8b28591.06aa18",
        "name": "",
        "voice": "0",
        "x": 1030,
        "y": 120,
        "wires": []
    },
    {
        "id": "77deece1.4bb584",
        "type": "function",
        "z": "c8b28591.06aa18",
        "name": "Sekunden zu Minuten",
        "func": "var minuten = msg.payload /60;\nmsg.payload=minuten;\n\n//msg.ui_control = {\"min\":0,\"max\":10, \"seg1\":0, \"seg2\":1}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 360,
        "wires": [
            [
                "4c2eceba.8c52"
            ]
        ]
    },
    {
        "id": "4c2eceba.8c52",
        "type": "ui_gauge",
        "z": "c8b28591.06aa18",
        "name": "Countdown Timer",
        "group": "3a5d5e9b.7af2a2",
        "order": 2,
        "width": "6",
        "height": "3",
        "gtype": "donut",
        "title": "",
        "label": "Minutes",
        "format": "{{value | number:0}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#ff2600",
            "#e6e600",
            "#00f900"
        ],
        "seg1": "",
        "seg2": "",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "b2e24b50.2cfba8",
        "type": "debug",
        "z": "c8b28591.06aa18",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "13c27d7e.e9b583",
        "type": "switch",
        "z": "c8b28591.06aa18",
        "name": "Timer completed",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Timer completed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 140,
        "wires": [
            [
                "217205f7.01df4a",
                "22c3788.500c388",
                "92dafeb8.6f5e2"
            ]
        ]
    },
    {
        "id": "217205f7.01df4a",
        "type": "ui_toast",
        "z": "c8b28591.06aa18",
        "position": "top right",
        "displayTime": "10",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1050,
        "y": 80,
        "wires": []
    },
    {
        "id": "7235ec4d.974334",
        "type": "ui_template",
        "z": "e58cd1d0.00b6",
        "group": "a0e00a00.81b428",
        "name": "Ensure dashboard is displayed as 1 or 2 columns",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\n@media only screen and (min-width: 1080px) { .masonry-container {\n    width: 1080px;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "x": 250,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f4df9cc7.b6648",
        "type": "ui_template",
        "z": "e58cd1d0.00b6",
        "group": "a0e00a00.81b428",
        "name": "Centre group titles",
        "order": 11,
        "width": 0,
        "height": 0,
        "format": "<style>\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    text-align: center;\n}\nbody {\n  overflow: hidden; /* Hide scrollbars */\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "global",
        "x": 150,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "54c3102a.bf3af",
        "type": "debug",
        "z": "78e2f0b5.5a802",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 860,
        "wires": []
    },
    {
        "id": "26e72d4b.10b7e2",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest1_length",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest1_length",
        "payloadType": "flow",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "32da8e96.218f82"
            ]
        ]
    },
    {
        "id": "32da8e96.218f82",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Rest1",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 2,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}m",
        "min": 0,
        "max": "90",
        "step": 1,
        "x": 310,
        "y": 500,
        "wires": [
            [
                "407a7735.9996d8"
            ]
        ]
    },
    {
        "id": "9d174681.47c718",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Rest1 link in",
        "links": [
            "152f6dff.5390c2"
        ],
        "x": 175,
        "y": 520,
        "wires": [
            [
                "32da8e96.218f82"
            ]
        ]
    },
    {
        "id": "407a7735.9996d8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest1_length",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 500,
        "wires": [
            [
                "5f513d25.cff454"
            ]
        ]
    },
    {
        "id": "7e85a505.02910c",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest2_length",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest2_length",
        "payloadType": "flow",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "8e765246.634ae"
            ]
        ]
    },
    {
        "id": "8e765246.634ae",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Rest2",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 4,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}m",
        "min": 0,
        "max": "90",
        "step": 1,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "5c1d381a.2d3778"
            ]
        ]
    },
    {
        "id": "deafe85c.da1e98",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Rest2 link in",
        "links": [
            "47d5b44b.6e6eec"
        ],
        "x": 175,
        "y": 620,
        "wires": [
            [
                "8e765246.634ae"
            ]
        ]
    },
    {
        "id": "5c1d381a.2d3778",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest2_length",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 600,
        "wires": [
            [
                "af97cb5a.275ed8"
            ]
        ]
    },
    {
        "id": "674779cc.848a08",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest3_length",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest3_length",
        "payloadType": "flow",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "a9ce864.82cb178"
            ]
        ]
    },
    {
        "id": "a9ce864.82cb178",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Rest3",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 6,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}m",
        "min": 0,
        "max": "90",
        "step": 1,
        "x": 310,
        "y": 680,
        "wires": [
            [
                "dbedc433.600658"
            ]
        ]
    },
    {
        "id": "c8ecb74a.a53358",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Rest3 link in",
        "links": [
            "afeb2e1.920b4d"
        ],
        "x": 175,
        "y": 700,
        "wires": [
            [
                "a9ce864.82cb178"
            ]
        ]
    },
    {
        "id": "dbedc433.600658",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest3_length",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 680,
        "wires": [
            [
                "826d046a.3a0268"
            ]
        ]
    },
    {
        "id": "db031b90.29bf98",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest4_length",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest4_length",
        "payloadType": "flow",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "bd535f7b.bdadd"
            ]
        ]
    },
    {
        "id": "bd535f7b.bdadd",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Rest4",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 8,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}m",
        "min": 0,
        "max": "90",
        "step": 1,
        "x": 310,
        "y": 760,
        "wires": [
            [
                "a7c29838.90f638"
            ]
        ]
    },
    {
        "id": "68dc6c2.b4d4894",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Rest4 link in",
        "links": [
            "9de3c754.ae99c8"
        ],
        "x": 175,
        "y": 780,
        "wires": [
            [
                "bd535f7b.bdadd"
            ]
        ]
    },
    {
        "id": "a7c29838.90f638",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest4_length",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 760,
        "wires": [
            [
                "2de4df6e.2c85c"
            ]
        ]
    },
    {
        "id": "eae95b00.013438",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest1_temp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest1_temp",
        "payloadType": "flow",
        "x": 800,
        "y": 500,
        "wires": [
            [
                "921427f8.566638"
            ]
        ]
    },
    {
        "id": "921427f8.566638",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "@",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 1,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": "20",
        "max": "80",
        "step": 1,
        "x": 990,
        "y": 520,
        "wires": [
            [
                "d0bbc2af.6b4c6"
            ]
        ]
    },
    {
        "id": "1531a2dc.84956d",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Temp1 link in",
        "links": [
            "7e351393.a9e04c"
        ],
        "x": 855,
        "y": 540,
        "wires": [
            [
                "921427f8.566638"
            ]
        ]
    },
    {
        "id": "d0bbc2af.6b4c6",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest1_temp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 520,
        "wires": [
            [
                "57c59879.e51308"
            ]
        ]
    },
    {
        "id": "d25e3c2f.d61f1",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest2_temp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest2_temp",
        "payloadType": "flow",
        "x": 800,
        "y": 600,
        "wires": [
            [
                "8d075d34.c5f75"
            ]
        ]
    },
    {
        "id": "f4a1e90b.071b58",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Temp2 link in",
        "links": [
            "17103840.176778"
        ],
        "x": 855,
        "y": 640,
        "wires": [
            [
                "8d075d34.c5f75"
            ]
        ]
    },
    {
        "id": "bbc1e7da.086a88",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest2_temp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 620,
        "wires": [
            [
                "1e8943b.6960cbc"
            ]
        ]
    },
    {
        "id": "615bce5d.16725",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest3_temp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest3_temp",
        "payloadType": "flow",
        "x": 800,
        "y": 680,
        "wires": [
            [
                "6071ddb.458aa24"
            ]
        ]
    },
    {
        "id": "9d80444a.fb5c38",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Temp3 link in",
        "links": [
            "a8532783.441e48"
        ],
        "x": 855,
        "y": 720,
        "wires": [
            [
                "6071ddb.458aa24"
            ]
        ]
    },
    {
        "id": "7a149c7c.8c6f94",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest3_temp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 700,
        "wires": [
            [
                "7842a85d.66db68"
            ]
        ]
    },
    {
        "id": "b6e52ca3.2c295",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "get rest4_temp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::rest4_temp",
        "payloadType": "flow",
        "x": 800,
        "y": 760,
        "wires": [
            [
                "cd5f4a8c.f14078"
            ]
        ]
    },
    {
        "id": "e6aa6b97.e9dfc8",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather Temp4 link in",
        "links": [
            "a02e6a3f.3a25a8"
        ],
        "x": 855,
        "y": 800,
        "wires": [
            [
                "cd5f4a8c.f14078"
            ]
        ]
    },
    {
        "id": "551c6a50.cd3b34",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::rest4_temp",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 780,
        "wires": [
            [
                "c0301573.73fb98"
            ]
        ]
    },
    {
        "id": "8d075d34.c5f75",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "@",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 3,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": "20",
        "max": "80",
        "step": 1,
        "x": 990,
        "y": 620,
        "wires": [
            [
                "bbc1e7da.086a88"
            ]
        ]
    },
    {
        "id": "6071ddb.458aa24",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "@",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 5,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": "20",
        "max": "80",
        "step": 1,
        "x": 990,
        "y": 700,
        "wires": [
            [
                "7a149c7c.8c6f94"
            ]
        ]
    },
    {
        "id": "cd5f4a8c.f14078",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "@",
        "tooltip": "",
        "group": "4871467d.3f6578",
        "order": 7,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": "20",
        "max": "80",
        "step": 1,
        "x": 990,
        "y": 780,
        "wires": [
            [
                "551c6a50.cd3b34"
            ]
        ]
    },
    {
        "id": "53eae67a.071798",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "mash_start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::mash_start",
        "payloadType": "flow",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "e487c85a.28a338"
            ]
        ]
    },
    {
        "id": "e487c85a.28a338",
        "type": "ui_dropdown",
        "z": "3da984a3.27885c",
        "name": "Start time",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "e010af88.2414c",
        "order": 10,
        "width": 8,
        "height": 1,
        "passthru": true,
        "options": [
            {
                "label": "Start now",
                "value": "now",
                "type": "str"
            },
            {
                "label": "Delay start by..",
                "value": "delay",
                "type": "str"
            },
            {
                "label": "Resume at",
                "value": "resume",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "bca241cd.464b2"
            ]
        ]
    },
    {
        "id": "bca241cd.464b2",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mash_start",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 420,
        "wires": [
            [
                "394ebead.b33262"
            ]
        ]
    },
    {
        "id": "394ebead.b33262",
        "type": "function",
        "z": "3da984a3.27885c",
        "name": "Show/Hide scheduler",
        "func": "if(flow.get('mash_start', 'storeInFile') == \"now\"){\n    msg.payload = {group:{hide:[\"Mash_Schedule_Control2\"]}}\n}\nelse\n{\n        msg.payload = {group:{show:[\"Mash_Schedule_Control2\"]}}\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 420,
        "wires": [
            [
                "5dd68a77.961094"
            ]
        ]
    },
    {
        "id": "5dd68a77.961094",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Scheduler visibility",
        "links": [
            "d9f805ba.f62428"
        ],
        "x": 885,
        "y": 420,
        "wires": []
    },
    {
        "id": "332320ac.facee",
        "type": "ui_ui_control",
        "z": "3da984a3.27885c",
        "name": "Dashboard connection",
        "events": "all",
        "x": 260,
        "y": 40,
        "wires": [
            [
                "749aec45.ab7f34"
            ]
        ]
    },
    {
        "id": "d9f805ba.f62428",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "5dd68a77.961094",
            "df1f38a3.76ecb8",
            "18197756.aa0f39",
            "be3f1a7a.188088"
        ],
        "x": 95,
        "y": 40,
        "wires": [
            [
                "332320ac.facee"
            ]
        ]
    },
    {
        "id": "906a0832.614d68",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Initialization",
        "links": [
            "749aec45.ab7f34"
        ],
        "x": 555,
        "y": 380,
        "wires": [
            [
                "394ebead.b33262"
            ]
        ]
    },
    {
        "id": "749aec45.ab7f34",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Connection established",
        "links": [
            "906a0832.614d68"
        ],
        "x": 415,
        "y": 40,
        "wires": []
    },
    {
        "id": "f5040bb6.50aa28",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::strike_adjustment",
        "payloadType": "flow",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "ed72f93.aa2ef08"
            ]
        ]
    },
    {
        "id": "ed72f93.aa2ef08",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Strike adjustment",
        "tooltip": "",
        "group": "e010af88.2414c",
        "order": 8,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": "-10",
        "max": "10",
        "step": "0.1",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "4e24f8d1.8c5f58"
            ]
        ]
    },
    {
        "id": "4e24f8d1.8c5f58",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::strike_adjustment",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 140,
        "wires": [
            [
                "1f068a9f.9d16b5"
            ]
        ]
    },
    {
        "id": "1f068a9f.9d16b5",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "ramping_rate",
        "links": [
            "581f76fc.d6cce8"
        ],
        "x": 855,
        "y": 140,
        "wires": []
    },
    {
        "id": "8319c25a.54a4b",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::mash_steps",
        "payloadType": "flow",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "1631276b.6861c9"
            ]
        ]
    },
    {
        "id": "1631276b.6861c9",
        "type": "ui_dropdown",
        "z": "3da984a3.27885c",
        "name": "Mash steps",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "e010af88.2414c",
        "order": 9,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Disabled",
                "value": 0,
                "type": "num"
            },
            {
                "label": "1 step",
                "value": 1,
                "type": "num"
            },
            {
                "label": "2 steps",
                "value": 2,
                "type": "num"
            },
            {
                "label": "3 steps",
                "value": 3,
                "type": "num"
            },
            {
                "label": "4 steps",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "db71164a.92a1b8"
            ]
        ]
    },
    {
        "id": "72399970.c8c148",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "brewfather mash steps link in",
        "links": [
            "f819f0cd.fa874"
        ],
        "x": 215,
        "y": 280,
        "wires": [
            [
                "1631276b.6861c9"
            ]
        ]
    },
    {
        "id": "db71164a.92a1b8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mash_steps",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 260,
        "wires": [
            [
                "1fa07a38.625bd6",
                "8ffd0a3f.234e28"
            ]
        ]
    },
    {
        "id": "1fa07a38.625bd6",
        "type": "function",
        "z": "3da984a3.27885c",
        "name": "Show/Hide rests",
        "func": "var mashStep1Msg = {enabled:false,payload:0};\nvar mashStep2Msg = {enabled:false, payload:0};\nvar mashStep3Msg = {enabled:false, payload:0};\nvar mashStep4Msg = {enabled:false, payload:0};\n\nif(flow.get('mash_steps', 'storeInFile') == 1){mashStep1Msg = {enabled:true};}\nif(flow.get('mash_steps', 'storeInFile') == 2){mashStep1Msg = {enabled:true};mashStep2Msg = {enabled:true};}\nif(flow.get('mash_steps', 'storeInFile') == 3){mashStep1Msg = {enabled:true};mashStep2Msg = {enabled:true};mashStep3Msg = {enabled:true};}\nif(flow.get('mash_steps', 'storeInFile') == 4){mashStep1Msg = {enabled:true};mashStep2Msg = {enabled:true};mashStep3Msg = {enabled:true};mashStep4Msg = {enabled:true};}\n\nif(flow.get('mash_steps', 'storeInFile') === 0){msg.payload = {group:{hide:[\"Mash_Schedule_Control1\", \"Mash_Schedule_Control3\", \"Mash_Schedule_Rest4\", \"Mash_Schedule_Rest3\", \"Mash_Schedule_Rest2\", \"Mash_Schedule_Rest1\", \"Mash_Schedule_Rest4b\", \"Mash_Schedule_Rest3b\", \"Mash_Schedule_Rest2b\", \"Mash_Schedule_Rest1b\"]}}}\nif(flow.get('mash_steps', 'storeInFile') == 1){msg.payload = {group:{hide:[\"Mash_Schedule_Rest4\", \"Mash_Schedule_Rest3\", \"Mash_Schedule_Rest2\", \"Mash_Schedule_Rest4b\", \"Mash_Schedule_Rest3b\", \"Mash_Schedule_Rest2b\", \"Mash_Schedule_Rest1b\"], show:[\"Mash_Schedule_Control1\", \"Mash_Schedule_Control3\", \"Mash_Schedule_Rest1\"]}}}\nif(flow.get('mash_steps', 'storeInFile') == 2){msg.payload = {group:{hide:[\"Mash_Schedule_Rest4\", \"Mash_Schedule_Rest3\", \"Mash_Schedule_Rest4b\", \"Mash_Schedule_Rest3b\", \"Mash_Schedule_Rest2b\", \"Mash_Schedule_Rest1b\"], show:[\"Mash_Schedule_Control1\", \"Mash_Schedule_Control3\", \"Mash_Schedule_Rest1\", \"Mash_Schedule_Rest2\"]}}}\nif(flow.get('mash_steps', 'storeInFile') == 3){msg.payload = {group:{hide:[\"Mash_Schedule_Rest4\", \"Mash_Schedule_Rest4b\", \"Mash_Schedule_Rest3b\", \"Mash_Schedule_Rest2b\", \"Mash_Schedule_Rest1b\"], show:[\"Mash_Schedule_Control1\", \"Mash_Schedule_Control3\", \"Mash_Schedule_Rest1\", \"Mash_Schedule_Rest2\", \"Mash_Schedule_Rest3\"]}}}\nif(flow.get('mash_steps', 'storeInFile') == 4){msg.payload = {group:{hide:[\"Mash_Schedule_Rest4b\", \"Mash_Schedule_Rest3b\", \"Mash_Schedule_Rest2b\", \"Mash_Schedule_Rest1b\"], show:[\"Mash_Schedule_Control1\", \"Mash_Schedule_Control3\", \"Mash_Schedule_Rest1\", \"Mash_Schedule_Rest2\", \"Mash_Schedule_Rest3\", \"Mash_Schedule_Rest4\"]}}}\n\nreturn [msg, mashStep1Msg, mashStep2Msg, mashStep3Msg, mashStep4Msg];\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 260,
        "wires": [
            [
                "df1f38a3.76ecb8"
            ],
            [
                "32da8e96.218f82",
                "921427f8.566638"
            ],
            [
                "8e765246.634ae",
                "8d075d34.c5f75"
            ],
            [
                "a9ce864.82cb178",
                "6071ddb.458aa24"
            ],
            [
                "bd535f7b.bdadd",
                "cd5f4a8c.f14078"
            ]
        ]
    },
    {
        "id": "df1f38a3.76ecb8",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "ramping_rate",
        "links": [
            "d9f805ba.f62428"
        ],
        "x": 895,
        "y": 240,
        "wires": []
    },
    {
        "id": "e5a29414.e020e8",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "Hours",
        "label": "",
        "tooltip": "",
        "group": "e010af88.2414c",
        "order": 11,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}h",
        "min": 0,
        "max": "12",
        "step": 1,
        "x": 150,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "10d682f6.c923dd",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "Minutes",
        "label": "",
        "tooltip": "",
        "group": "e010af88.2414c",
        "order": 12,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}m",
        "min": 0,
        "max": "59",
        "step": 1,
        "x": 300,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "245f082f.377808",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Update schedule length",
        "links": [
            "8ffd0a3f.234e28",
            "2de4df6e.2c85c",
            "826d046a.3a0268",
            "af97cb5a.275ed8",
            "5f513d25.cff454",
            "c0301573.73fb98",
            "7842a85d.66db68",
            "1e8943b.6960cbc",
            "57c59879.e51308",
            "45e82faf.ecb83"
        ],
        "x": 175,
        "y": 840,
        "wires": [
            [
                "4e5c2463.c2c28c"
            ]
        ]
    },
    {
        "id": "4e5c2463.c2c28c",
        "type": "function",
        "z": "3da984a3.27885c",
        "name": "Schedule length",
        "func": "msg.payload = 0.0\n\nvar rampingRatePerMin = flow.get('ramping_rate_perMin', 'storeInFile');\n\nif(flow.get('mash_steps', 'storeInFile') >= 1){msg.payload += flow.get('rest1_length', 'storeInFile')}\nif(flow.get('mash_steps', 'storeInFile') >= 2){msg.payload += ((flow.get('rest2_temp', 'storeInFile')-flow.get('rest1_temp', 'storeInFile'))*rampingRatePerMin) + flow.get('rest2_length', 'storeInFile')}\nif(flow.get('mash_steps', 'storeInFile') >= 3){msg.payload += ((flow.get('rest3_temp', 'storeInFile')-flow.get('rest2_temp', 'storeInFile'))*rampingRatePerMin) + flow.get('rest3_length', 'storeInFile')}\n\nif(flow.get('mash_steps', 'storeInFile') >= 4){msg.payload += ((flow.get('rest4_temp', 'storeInFile')-flow.get('rest3_temp', 'storeInFile'))*rampingRatePerMin) + flow.get('rest4_length', 'storeInFile')}\n\nmsg.payload = parseFloat(msg.payload).toFixed(2);\n\nflow.set('schedule_length', msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 840,
        "wires": [
            [
                "4f4ee0a5.79f62"
            ]
        ]
    },
    {
        "id": "4f4ee0a5.79f62",
        "type": "ui_text",
        "z": "3da984a3.27885c",
        "group": "4871467d.3f6578",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Total schedule length",
        "format": "{{msg.payload}}m",
        "layout": "row-spread",
        "x": 560,
        "y": 840,
        "wires": []
    },
    {
        "id": "45825977.f3e148",
        "type": "ui_text",
        "z": "3da984a3.27885c",
        "group": "4871467d.3f6578",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Total schedule length also includes estimated ramping time between steps",
        "format": "",
        "layout": "row-spread",
        "x": 420,
        "y": 880,
        "wires": []
    },
    {
        "id": "8ffd0a3f.234e28",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "9c82b76e.289bb8"
        ],
        "x": 615,
        "y": 300,
        "wires": []
    },
    {
        "id": "5f513d25.cff454",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "51b78923.cf14c8"
        ],
        "x": 575,
        "y": 540,
        "wires": []
    },
    {
        "id": "af97cb5a.275ed8",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "fb487942.28eed8"
        ],
        "x": 575,
        "y": 640,
        "wires": []
    },
    {
        "id": "826d046a.3a0268",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "e2c5db91.b21a88"
        ],
        "x": 575,
        "y": 720,
        "wires": []
    },
    {
        "id": "2de4df6e.2c85c",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "646252be.fe410c"
        ],
        "x": 575,
        "y": 800,
        "wires": []
    },
    {
        "id": "57c59879.e51308",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "51b78923.cf14c8",
            "581f76fc.d6cce8"
        ],
        "x": 1255,
        "y": 560,
        "wires": []
    },
    {
        "id": "1e8943b.6960cbc",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808"
        ],
        "x": 1255,
        "y": 660,
        "wires": []
    },
    {
        "id": "7842a85d.66db68",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "e2c5db91.b21a88"
        ],
        "x": 1255,
        "y": 740,
        "wires": []
    },
    {
        "id": "c0301573.73fb98",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "245f082f.377808",
            "646252be.fe410c"
        ],
        "x": 1255,
        "y": 820,
        "wires": []
    },
    {
        "id": "799388ce.e200a8",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Run button colour",
        "links": [
            "f77d5762.4fa548"
        ],
        "x": 75,
        "y": 983,
        "wires": [
            [
                "bd05ee3f.97c9e"
            ]
        ]
    },
    {
        "id": "bd05ee3f.97c9e",
        "type": "ui_button",
        "z": "3da984a3.27885c",
        "name": "",
        "group": "6c2dc2b5.3e20ac",
        "order": 3,
        "width": "8",
        "height": 1,
        "passthru": false,
        "label": "Ramp to strike",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 200,
        "y": 983,
        "wires": [
            [
                "dd59e3d8.a1487"
            ]
        ]
    },
    {
        "id": "dd59e3d8.a1487",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 983,
        "wires": [
            [
                "c1ff0c90.09af"
            ],
            [
                "b2947df3.2afc9"
            ]
        ]
    },
    {
        "id": "37045c93.e3dd74",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 350,
        "y": 1023,
        "wires": [
            [
                "b2947df3.2afc9"
            ]
        ]
    },
    {
        "id": "b2947df3.2afc9",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Switch off",
        "rules": [
            {
                "t": "set",
                "p": "scheduler",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1003,
        "wires": [
            [
                "ea96b7cd.e89278"
            ]
        ]
    },
    {
        "id": "c1ff0c90.09af",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Switch on",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "TriggerRampToStrike",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 963,
        "wires": [
            [
                "ea96b7cd.e89278",
                "c16a6009.a676a"
            ]
        ]
    },
    {
        "id": "ea96b7cd.e89278",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "1afde172.9dcecf",
            "ab24d9b7.c2ac88",
            "1c33b0b8.0bbddf"
        ],
        "x": 635,
        "y": 1003,
        "wires": []
    },
    {
        "id": "1c33b0b8.0bbddf",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Scheduler update",
        "links": [
            "ea96b7cd.e89278",
            "1e7696b3.a02b79"
        ],
        "x": 115,
        "y": 1080,
        "wires": [
            [
                "ccee596f.7eddb8"
            ]
        ]
    },
    {
        "id": "ccee596f.7eddb8",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 210,
        "y": 1080,
        "wires": [
            [
                "ad4ad92c.8fc8a8"
            ]
        ]
    },
    {
        "id": "ad4ad92c.8fc8a8",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "",
        "property": "#:(storeInFile)::BrewMode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "TriggerRampToStrike",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1080,
        "wires": [
            [
                "d961857c.e374a8"
            ],
            [
                "71edbedb.3592f"
            ]
        ]
    },
    {
        "id": "d961857c.e374a8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#66cc00",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 1060,
        "wires": [
            [
                "f77d5762.4fa548"
            ]
        ]
    },
    {
        "id": "71edbedb.3592f",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 1100,
        "wires": [
            [
                "f77d5762.4fa548"
            ]
        ]
    },
    {
        "id": "f77d5762.4fa548",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Run button colour",
        "links": [
            "799388ce.e200a8"
        ],
        "x": 595,
        "y": 1080,
        "wires": []
    },
    {
        "id": "cc50c7f0.e40ed8",
        "type": "ui_text",
        "z": "3da984a3.27885c",
        "group": "6c2dc2b5.3e20ac",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Initial strike temperature",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 510,
        "y": 920,
        "wires": []
    },
    {
        "id": "dc4b7dd5.2fdcc",
        "type": "ui_ui_control",
        "z": "78e2f0b5.5a802",
        "name": "",
        "events": "all",
        "x": 810,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "92dafeb8.6f5e2",
        "type": "link out",
        "z": "c8b28591.06aa18",
        "name": "Timer completed",
        "links": [
            "63c0c893.1ca098"
        ],
        "x": 975,
        "y": 180,
        "wires": []
    },
    {
        "id": "241a49cb.421f06",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::ramping_rate_perMin",
        "payloadType": "flow",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "b7baf15e.e248a"
            ]
        ]
    },
    {
        "id": "b7baf15e.e248a",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Ramp rate/min",
        "tooltip": "",
        "group": "e010af88.2414c",
        "order": 8,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": 0,
        "max": "10",
        "step": "0.05",
        "x": 420,
        "y": 180,
        "wires": [
            [
                "ad41a87e.157078"
            ]
        ]
    },
    {
        "id": "ad41a87e.157078",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::ramping_rate_perMin",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "45e82faf.ecb83"
            ]
        ]
    },
    {
        "id": "581f76fc.d6cce8",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Calculate Start temp",
        "links": [
            "57c59879.e51308",
            "1f068a9f.9d16b5",
            "c00e7ea1.bee0a"
        ],
        "x": 215,
        "y": 920,
        "wires": [
            [
                "6a6c41e2.dc0ba"
            ]
        ]
    },
    {
        "id": "6a6c41e2.dc0ba",
        "type": "function",
        "z": "3da984a3.27885c",
        "name": "",
        "func": "\nvar strikeAdjustment = flow.get(\"strike_adjustment\", \"storeInFile\");\nvar mashStep1Temp = flow.get('rest1_temp', 'storeInFile');\n\nglobal.set(\"strikeTemp\", strikeAdjustment + mashStep1Temp);\n\nmsg.payload = global.get(\"strikeTemp\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 920,
        "wires": [
            [
                "cc50c7f0.e40ed8"
            ]
        ]
    },
    {
        "id": "45e82faf.ecb83",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "ramping_rate",
        "links": [
            "245f082f.377808"
        ],
        "x": 855,
        "y": 180,
        "wires": []
    },
    {
        "id": "c76903b7.69cd1",
        "type": "link in",
        "z": "7f292261.86badc",
        "name": "Set MLT Target temp",
        "links": [
            "16dc9416.f9dbcc",
            "2376657a.25d0fa",
            "400ba315.ee2e8c",
            "897a155c.b705c8",
            "80604b7c.de3de8",
            "2d31cce6.ce7794",
            "48fca837.ba4f98"
        ],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "c788fa64.85dad8"
            ]
        ]
    },
    {
        "id": "5dab15cf.55df1c",
        "type": "comment",
        "z": "3da984a3.27885c",
        "name": "Brew control section",
        "info": "",
        "x": 110,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4954fe18.fbd2a",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [],
        "x": 275,
        "y": 1960,
        "wires": [
            [
                "78fd845d.cdc46c"
            ]
        ]
    },
    {
        "id": "78fd845d.cdc46c",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "BrewMode",
        "property": "#:(storeInFile)::BrewMode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "TriggerRampToStrike",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RampToStrike",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TriggerMashing",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 1960,
        "wires": [
            [
                "2ea7482.86e60b8",
                "68e39bf.fa4ab64",
                "bd931d81.a392f",
                "eaea5a38.4640a8"
            ],
            [
                "600f2b31.649314"
            ],
            [
                "7716c831.ab1838"
            ]
        ]
    },
    {
        "id": "ea4b9082.2b31a",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "clear global.BrewMode, and Status",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Manual",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1720,
        "wires": [
            [
                "12dd5b32.bb75c5"
            ]
        ]
    },
    {
        "id": "2ba3e452.5035bc",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "initialise",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1720,
        "wires": [
            [
                "ea4b9082.2b31a",
                "626ba097.1350e"
            ]
        ]
    },
    {
        "id": "8639f608.473c98",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Run button colour",
        "links": [
            "aa0ea400.690bd8"
        ],
        "x": 75,
        "y": 1260,
        "wires": [
            [
                "5b3d35b6.5dc5bc"
            ]
        ]
    },
    {
        "id": "5b3d35b6.5dc5bc",
        "type": "ui_button",
        "z": "3da984a3.27885c",
        "name": "",
        "group": "6c2dc2b5.3e20ac",
        "order": 3,
        "width": "8",
        "height": 1,
        "passthru": false,
        "label": "Start mash",
        "tooltip": "",
        "color": "",
        "bgcolor": "{{colour}}",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "d23bb81e.abeeb8"
            ]
        ]
    },
    {
        "id": "d23bb81e.abeeb8",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 1260,
        "wires": [
            [
                "1f220edf.b9f7e1",
                "308d85da.17b23a"
            ],
            [
                "52c2d745.9831d8"
            ]
        ]
    },
    {
        "id": "228c6d57.f2bc22",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 350,
        "y": 1300,
        "wires": [
            [
                "52c2d745.9831d8"
            ]
        ]
    },
    {
        "id": "52c2d745.9831d8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Switch off",
        "rules": [
            {
                "t": "set",
                "p": "scheduler",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1280,
        "wires": [
            [
                "f6459377.5492a"
            ]
        ]
    },
    {
        "id": "1f220edf.b9f7e1",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Switch on",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "TriggerMashing",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1240,
        "wires": [
            [
                "f6459377.5492a"
            ]
        ]
    },
    {
        "id": "f6459377.5492a",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "c1223250.ca94b"
        ],
        "x": 635,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c1223250.ca94b",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Scheduler update",
        "links": [
            "f6459377.5492a"
        ],
        "x": 135,
        "y": 1340,
        "wires": [
            [
                "7c0aa297.5e25bc"
            ]
        ]
    },
    {
        "id": "7c0aa297.5e25bc",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 230,
        "y": 1340,
        "wires": [
            [
                "b6a7ca17.6760e8"
            ]
        ]
    },
    {
        "id": "b6a7ca17.6760e8",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "",
        "property": "#:(storeInFile)::BrewMode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "TriggerMashing",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Mashing",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 1380,
        "wires": [
            [
                "ff9dd66a.621948"
            ],
            [
                "ff9dd66a.621948"
            ],
            [
                "559aaa39.eb8b14"
            ]
        ]
    },
    {
        "id": "ff9dd66a.621948",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "on colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "#66cc00",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1360,
        "wires": [
            [
                "aa0ea400.690bd8"
            ]
        ]
    },
    {
        "id": "559aaa39.eb8b14",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "off colour",
        "rules": [
            {
                "t": "set",
                "p": "colour",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1400,
        "wires": [
            [
                "aa0ea400.690bd8"
            ]
        ]
    },
    {
        "id": "aa0ea400.690bd8",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Run button colour",
        "links": [
            "8639f608.473c98"
        ],
        "x": 615,
        "y": 1380,
        "wires": []
    },
    {
        "id": "357ca3f0.b6706c",
        "type": "link in",
        "z": "c8b28591.06aa18",
        "name": "Set Timer Value In",
        "links": [
            "3e8bec3a.472474",
            "57b9966e.5c1358",
            "a8af16f2.928288",
            "82704aac.e7d888"
        ],
        "x": 267,
        "y": 60,
        "wires": [
            [
                "a6225ae4.c154a8"
            ]
        ]
    },
    {
        "id": "ea080bb9.42ef98",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Run button colour",
        "links": [],
        "x": 115,
        "y": 1520,
        "wires": [
            [
                "79468927.b7eca8"
            ]
        ]
    },
    {
        "id": "79468927.b7eca8",
        "type": "ui_button",
        "z": "3da984a3.27885c",
        "name": "",
        "group": "6c2dc2b5.3e20ac",
        "order": 3,
        "width": "8",
        "height": 1,
        "passthru": false,
        "label": "Abandon",
        "tooltip": "",
        "color": "",
        "bgcolor": "gray",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 220,
        "y": 1520,
        "wires": [
            [
                "559aaa39.eb8b14",
                "2d17dc9a.6bb864",
                "52c2d745.9831d8",
                "b2947df3.2afc9"
            ]
        ]
    },
    {
        "id": "2d17dc9a.6bb864",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1520,
        "wires": [
            [
                "72c34e6d.97577",
                "32d4b6c.e63434a"
            ]
        ]
    },
    {
        "id": "72c34e6d.97577",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "5cbd56e2.72cf08"
        ],
        "x": 635,
        "y": 1520,
        "wires": []
    },
    {
        "id": "5cbd56e2.72cf08",
        "type": "link in",
        "z": "c8b28591.06aa18",
        "name": "Timer Stop Button In",
        "links": [
            "72c34e6d.97577",
            "6ce02d0f.3f0894"
        ],
        "x": 145,
        "y": 480,
        "wires": [
            [
                "61c20d25.8c3474"
            ]
        ]
    },
    {
        "id": "2bcd27bc.b54168",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "Brew Control loop",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 190,
        "y": 1920,
        "wires": [
            [
                "78fd845d.cdc46c"
            ]
        ]
    },
    {
        "id": "600f2b31.649314",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "RampToStrike switch",
        "property": "temp-MLT",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "#:(storeInFile)::mlt_adjusted_target",
                "vt": "flow"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 620,
        "y": 1960,
        "wires": [
            [
                "3a1f5a57.a5d076"
            ]
        ]
    },
    {
        "id": "a1b43cfd.c7958",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "395383f7.ad069c",
            "da29ca33.74a648"
        ],
        "x": 775,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f3fef30.652ef1",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "82b7a3f0.12d99"
        ],
        "x": 775,
        "y": 1840,
        "wires": []
    },
    {
        "id": "82b7a3f0.12d99",
        "type": "link in",
        "z": "c68db1a2.68e94",
        "name": "HLT Pump manual fire",
        "links": [
            "35c856bc.ac4daa",
            "f3fef30.652ef1"
        ],
        "x": 203,
        "y": 280,
        "wires": [
            [
                "b73c6b10.f42fe8"
            ]
        ]
    },
    {
        "id": "2ea7482.86e60b8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Trigger pump",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1840,
        "wires": [
            [
                "f3fef30.652ef1"
            ]
        ]
    },
    {
        "id": "68e39bf.fa4ab64",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set strike temp",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "RampToStrike",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "strikeTemp",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1800,
        "wires": [
            [
                "80604b7c.de3de8"
            ]
        ]
    },
    {
        "id": "80604b7c.de3de8",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "c76903b7.69cd1",
            "51913ee7.1c517",
            "72e960b.66f0ba"
        ],
        "x": 776,
        "y": 1800,
        "wires": []
    },
    {
        "id": "b73c6b10.f42fe8",
        "type": "ui_switch",
        "z": "c68db1a2.68e94",
        "name": "",
        "label": "MLT Pump",
        "tooltip": "",
        "group": "ea5e6691.a9d4b8",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 358,
        "y": 320,
        "wires": [
            [
                "3239dee7.fe3402"
            ]
        ]
    },
    {
        "id": "37dfd73f.3deab8",
        "type": "ui_switch",
        "z": "c68db1a2.68e94",
        "name": "",
        "label": "HLT Pump",
        "tooltip": "",
        "group": "a0e00a00.81b428",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 331,
        "y": 160,
        "wires": [
            [
                "54620947.c55208"
            ]
        ]
    },
    {
        "id": "6d456b34.463524",
        "type": "ui_switch",
        "z": "c68db1a2.68e94",
        "name": "",
        "label": "BK Pump",
        "tooltip": "",
        "group": "9d59abb0.326b08",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "6d7905e8.76a75c"
            ]
        ]
    },
    {
        "id": "bd931d81.a392f",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 650,
        "y": 1880,
        "wires": [
            [
                "a1b43cfd.c7958"
            ]
        ]
    },
    {
        "id": "395383f7.ad069c",
        "type": "link in",
        "z": "20e5f99d.45d096",
        "name": "Enable PID Button Process",
        "links": [
            "a1b43cfd.c7958"
        ],
        "x": 415,
        "y": 40,
        "wires": [
            [
                "4a5bf6be.6e1108"
            ]
        ]
    },
    {
        "id": "3a1f5a57.a5d076",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "BrewMode=WaitingToMashIn",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "WaitingToMashIn",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Waiting for user to start mash",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1960,
        "wires": [
            [
                "98c7f27b.deef2"
            ]
        ]
    },
    {
        "id": "5573b5c5.68664c",
        "type": "ui_template",
        "z": "3da984a3.27885c",
        "group": "867a95f.bdb8168",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align:center;\" ng-bind-html=\"msg.payload\">{msg.payload}</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1320,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "eaea5a38.4640a8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ramping to strike temp",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1760,
        "wires": [
            [
                "a2eace52.d3a64"
            ]
        ]
    },
    {
        "id": "a2eace52.d3a64",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 775,
        "y": 1760,
        "wires": []
    },
    {
        "id": "959da750.2a46a8",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Receive template content",
        "links": [
            "12dd5b32.bb75c5",
            "98c7f27b.deef2",
            "a2eace52.d3a64",
            "aa57ae4f.a91e1",
            "b2b5cee6.25e58",
            "cb8c4d03.92d6a",
            "149345ed.691a4a"
        ],
        "x": 1225,
        "y": 1880,
        "wires": [
            [
                "5573b5c5.68664c"
            ]
        ]
    },
    {
        "id": "98c7f27b.deef2",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 1045,
        "y": 1960,
        "wires": []
    },
    {
        "id": "63c0c893.1ca098",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "92dafeb8.6f5e2"
        ],
        "x": 155,
        "y": 2200,
        "wires": [
            [
                "312e766b.9fe9ca",
                "19c568e8.9f4b77"
            ]
        ]
    },
    {
        "id": "5e031872.fa95f8",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "Mash Step Switch",
        "property": "#:(storeInFile)::ActiveMashStep",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 670,
        "y": 2300,
        "wires": [
            [
                "b544a0a1.c8e31"
            ],
            [
                "cb7e4614.c6c778"
            ],
            [
                "742aa51a.5be74c"
            ]
        ]
    },
    {
        "id": "b544a0a1.c8e31",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest2_length!=0",
        "property": "#:(storeInFile)::rest2_length",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2300,
        "wires": [
            [
                "7ec31a18.fd8fb4"
            ]
        ]
    },
    {
        "id": "7ec31a18.fd8fb4",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest2_time!=0",
        "property": "#:(storeInFile)::rest2_time",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2240,
        "wires": [
            [
                "331a04da.37e2cc",
                "f645b466.49c0e8"
            ]
        ]
    },
    {
        "id": "48fca837.ba4f98",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Set target temp",
        "links": [
            "c76903b7.69cd1",
            "51913ee7.1c517",
            "72e960b.66f0ba"
        ],
        "x": 1456,
        "y": 2480,
        "wires": []
    },
    {
        "id": "331a04da.37e2cc",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set rest2 values",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest2_temp",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "#:(storeInFile)::ActiveMashStep",
                "pt": "flow",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2276,
        "wires": [
            [
                "48fca837.ba4f98",
                "a6a40ab8.032d38"
            ]
        ]
    },
    {
        "id": "cb7e4614.c6c778",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest3_length!=0",
        "property": "#:(storeInFile)::rest3_length",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2420,
        "wires": [
            [
                "78d2b282.edb5ec"
            ]
        ]
    },
    {
        "id": "78d2b282.edb5ec",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest3_time!=0",
        "property": "#:(storeInFile)::rest3_time",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2360,
        "wires": [
            [
                "1bde75c0.0bffda",
                "8af146df.95a5c8"
            ]
        ]
    },
    {
        "id": "1bde75c0.0bffda",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set rest3 values",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::ActiveMashStep",
                "pt": "flow",
                "to": "3",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest3_temp",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2395,
        "wires": [
            [
                "48fca837.ba4f98",
                "a6a40ab8.032d38"
            ]
        ]
    },
    {
        "id": "742aa51a.5be74c",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest4_length!=0",
        "property": "#:(storeInFile)::rest4_length",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2540,
        "wires": [
            [
                "606f0757.91ca98"
            ]
        ]
    },
    {
        "id": "606f0757.91ca98",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest4_time!=0",
        "property": "#:(storeInFile)::rest4_time",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2480,
        "wires": [
            [
                "ce5286be.2d3e08",
                "3e000874.61d0b8"
            ]
        ]
    },
    {
        "id": "ce5286be.2d3e08",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set rest4 values",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest4_temp",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "#:(storeInFile)::ActiveMashStep",
                "pt": "flow",
                "to": "4",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2475,
        "wires": [
            [
                "48fca837.ba4f98",
                "a6a40ab8.032d38"
            ]
        ]
    },
    {
        "id": "f645b466.49c0e8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ramping to mash step 2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2233,
        "wires": [
            [
                "cb8c4d03.92d6a"
            ]
        ]
    },
    {
        "id": "cb8c4d03.92d6a",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 1415,
        "y": 2180,
        "wires": []
    },
    {
        "id": "94aeeb36.9bc418",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Mash steps completed",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 2400,
        "wires": [
            [
                "aa57ae4f.a91e1"
            ]
        ]
    },
    {
        "id": "aa57ae4f.a91e1",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 695,
        "y": 2400,
        "wires": []
    },
    {
        "id": "312e766b.9fe9ca",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "Mash steps check",
        "property": "#:(storeInFile)::ActiveMashStep",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lt",
                "v": "#:(storeInFile)::mash_steps",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2320,
        "wires": [
            [
                "5e031872.fa95f8"
            ],
            [
                "94aeeb36.9bc418"
            ]
        ]
    },
    {
        "id": "8af146df.95a5c8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ramping to mash step 3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2354,
        "wires": [
            [
                "cb8c4d03.92d6a"
            ]
        ]
    },
    {
        "id": "3e000874.61d0b8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ramping to mash step 4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2516,
        "wires": [
            [
                "cb8c4d03.92d6a"
            ]
        ]
    },
    {
        "id": "a6a40ab8.032d38",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1560,
        "y": 2380,
        "wires": [
            [
                "eb34386f.794c08",
                "b00ce9b8.71e658"
            ]
        ]
    },
    {
        "id": "eb34386f.794c08",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "Temp >= Target check",
        "property": "temp-MLT",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "#:(storeInFile)::mlt_adjusted_target",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1640,
        "y": 2280,
        "wires": [
            [
                "56bba196.b545c"
            ],
            [
                "a6a40ab8.032d38"
            ]
        ]
    },
    {
        "id": "82704aac.e7d888",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Set timer value",
        "links": [
            "357ca3f0.b6706c"
        ],
        "x": 2415,
        "y": 2360,
        "wires": []
    },
    {
        "id": "56bba196.b545c",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "Mash Step Switch",
        "property": "#:(storeInFile)::ActiveMashStep",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1890,
        "y": 2280,
        "wires": [
            [
                "39817463.09ffec",
                "b71c77aa.fd94a8"
            ],
            [
                "527a019a.9ca",
                "2d787dd2.3b6ff2"
            ],
            [
                "56a9bf69.76909",
                "be09282a.4ad758"
            ],
            [
                "18544a2f.d34db6",
                "9a44350e.40a668"
            ]
        ]
    },
    {
        "id": "56a9bf69.76909",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set mash step timer",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest3_length",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 2280,
        "wires": [
            [
                "82704aac.e7d888",
                "95213529.4c0b58"
            ]
        ]
    },
    {
        "id": "18544a2f.d34db6",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set mash step timer",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest4_length",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 2360,
        "wires": [
            [
                "82704aac.e7d888",
                "95213529.4c0b58"
            ]
        ]
    },
    {
        "id": "b2b5cee6.25e58",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Set status template",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 2415,
        "y": 2140,
        "wires": []
    },
    {
        "id": "be09282a.4ad758",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Mash step 3 activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 2320,
        "wires": [
            [
                "b2b5cee6.25e58"
            ]
        ]
    },
    {
        "id": "9a44350e.40a668",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Mash step 4 activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 2400,
        "wires": [
            [
                "b2b5cee6.25e58"
            ]
        ]
    },
    {
        "id": "e4976c4f.d6322",
        "type": "inject",
        "z": "3da984a3.27885c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::activate_step_offset",
        "payloadType": "flow",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "a4fa7b8c.772898"
            ]
        ]
    },
    {
        "id": "a4fa7b8c.772898",
        "type": "ui_numeric",
        "z": "3da984a3.27885c",
        "name": "",
        "label": "Activate Step Offset",
        "tooltip": "",
        "group": "e010af88.2414c",
        "order": 8,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}°C",
        "min": "0",
        "max": "10",
        "step": "0.1",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "344b3ae9.17cf26"
            ]
        ]
    },
    {
        "id": "344b3ae9.17cf26",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::activate_step_offset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b00ce9b8.71e658",
        "type": "function",
        "z": "3da984a3.27885c",
        "name": "post delay from set values",
        "func": "\nnode.log(global.get(\"temp-MLT\") + \" > \" + flow.get(\"mlt_adjusted_target\", \"storeInFile\") + \"?\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1810,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "b2f5c297.8be6f",
        "type": "function",
        "z": "3da984a3.27885c",
        "name": "Set mlt_adjusted_target",
        "func": "\nflow.set(\"mlt_adjusted_target\", global.get(\"mlt_target\", \"storeInFile\") - flow.get(\"activate_step_offset\", \"storeInFile\"), \"storeInFile\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1510,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "51913ee7.1c517",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Set MLT adjusted Target link in",
        "links": [
            "80604b7c.de3de8",
            "48fca837.ba4f98",
            "daaefcd1.9e8ef"
        ],
        "x": 1195,
        "y": 2020,
        "wires": [
            [
                "17de17b9.570f18"
            ]
        ]
    },
    {
        "id": "17de17b9.570f18",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1310,
        "y": 2020,
        "wires": [
            [
                "b2f5c297.8be6f"
            ]
        ]
    },
    {
        "id": "12dd5b32.bb75c5",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Update status template",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 495,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c5fb1a24.7b66e8",
        "type": "function",
        "z": "7f292261.86badc",
        "name": "MLTChart Helper",
        "func": "// A helper for the node-red chart.js template node\n// see the template node for the majority of the user defined data\n// here all that is needed is to setup values to limit the length of the chart\n// Firstly chartMaxPoints may be set non-zero and (for each channel) when the number\n// of points exceeds this value then the oldest samples will be discarded.\n// Alternatively (or in addition) if the x axis is time based then chartTimeSpan (milliseconds)\n// may be set and then old samples will be discarded to limit the chart to this time span.\n\nvar chartMaxPoints = 0;             //max no points in a chart before they drop off the left. Set to zero to disable\nvar chartTimeSpan = 60*60*1000;     //chart time span 4 mins. Set to zero to disable\n\n// ----------------------------------------------------------\n// You should not need to change anything below here\n\n// with inputs connected to the same nodes as a chart.js node this maintains a chart history\n// for preloading into the chart when it is opened in the browser\n\nvar topicsOfinterest = context.get('topicsOfInterest');    // can't use null here\nif (typeof topicsOfInterest == 'undefined') topicsOfInterest = null;\n\nvar msg2 = null;\nvar datasets = context.get('datasets') || [];\n// each dataset maps to a channel on the chart and consists of a hash with fields\n// topic: the topic name of the channel\n// data: an array of data points {x: x_value, y: y_value}\n// If msg.action == \"preload\" then the topic and payload are ignored and a message is passed\n// on containing the current chart data and msg.action still set to preload\n\nif (msg.action === \"preload\") {\n    // we should have been passed the topics of interest\n    topicsOfInterest = msg.topics;      // null if not provided\n    context.set('topicsOfInterest', topicsOfInterest);\n    // send a message containing the current chart data time range values, leave rest of msg as is\n    msg.payload = datasets;\n    msg.chartMaxPoints = chartMaxPoints;\n    msg.chartTimeSpan = chartTimeSpan;\n} else if (msg.action === \"restore\") {\n    // restoring from persistent memory\n    // step through the given datasets, if any\n    if (Array.isArray(msg.payload)) {\n        for (var i = 0; i < msg.payload.length; i++) {\n            topic = msg.payload[i].topic;\n            // find the matching topic\n            var found = false;\n            for (var k = 0; k < datasets.length; k++) {\n                if (datasets[k].topic == topic) {\n                    // insert the data in front of any that has been acquired since startup\n                    datasets[k].data = msg.payload[i].data.concat(datasets[k].data);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                // new topic so make a new dataset and fill it\n                datasets.push({topic: topic, data: msg.payload[i].data});\n            }\n        }\n    }\n    // remember that we have restored in order to enable future writes to persistent store\n    context.set(\"restored\", true);\n    // send a preload action to the chart\n    msg.action = \"preload\";\n    msg.payload = datasets;\n} else if (msg.action === \"load\") {\n    // replace existing data for matching topics\n    for (var j = 0; j < msg.payload.length; j++) {\n        var topic = msg.payload[j].topic;\n        // find it in the chart\n        found = false;\n        for (i = 0; i < datasets.length; i++) {\n            if (datasets[i].topic == topic) {\n                datasets[i].data = msg.payload[j].data;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset and fill it\n            datasets.push({topic: topic, data: msg.payload[j].data});\n        }\n    }\n    msg = null;         // don't send anything on\n} else {\n    // check whether the topic is one we are interested in\n    if (topicsOfInterest === null  || topicsOfInterest.indexOf(msg.topic) >= 0) {\n        found = false;\n        // find the right dataset if it already exists\n        for (i = 0; i < datasets.length; i++) {\n            dataset = datasets[i];\n            if (dataset.topic == msg.topic) {\n                found = true;\n                dataset.data.push(msg.payload);\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset\n            datasets.push({topic: msg.topic, data: [msg.payload]});\n        }\n    } else {\n        // ignore topics that are not of interest\n    }\n    // do not pass on a message to o/p 1, send the datasets to o/p 2 for persistent\n    // storage if required and we have been given data on startup\n    // this is to prevent the persistent store being overwritten before it has been read\n    msg = null;\n    if (context.get(\"restored\")) {\n        msg2 = {payload: datasets};\n    }\n}\n    \n// remove any points that are too old\nif (chartTimeSpan > 0) {\n    var now = new Date();\n    var oldestTimeAllowed = new Date();\n    oldestTimeAllowed.setTime(now.getTime() - (chartTimeSpan));\n    for (i = 0; i < datasets.length; i++) {\n        var data = datasets[i].data;\n        while (data.length > 0 ) {\n            // convert the x value (in place) to a Date if it is a string\n            if (typeof data[0].x === \"string\") {\n                data[0].x = new Date(data[0].x);\n            }            \n            if (data[0].x < oldestTimeAllowed) {\n                data.shift();\n            } else {\n                break;\n            }\n        }\n    }\n}\n// strip samples off the front if there are now too many\n// charTimeSpan == 0 implies don't do it\nif (chartMaxPoints > 0) {\n    var shifted = false;\n    for (i = 0; i < datasets.length; i++) {\n        data = datasets[i].data;\n        while(data.length > chartMaxPoints) {\n            data.shift();\n        }\n    }\n}\ncontext.set('datasets', datasets);\nreturn [msg,msg2];\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 616,
        "y": 124,
        "wires": [
            [
                "3f975313.47b78c"
            ],
            []
        ]
    },
    {
        "id": "3f975313.47b78c",
        "type": "ui_template",
        "z": "7f292261.86badc",
        "group": "ea5e6691.a9d4b8",
        "name": "MLT chart.js",
        "order": 6,
        "width": "6",
        "height": "4",
        "format": "<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"MLTChart\" width=\"300\" height=\"200\"></canvas>\n<script>\n(function() {\n    var chartID = \"MLTChart\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Target\",    // used here not by chart.js\n                label: \"Target\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 0,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Temp\",    // used here not by chart.js\n                label: \"Temp\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 0,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'minute',\n                        unitStepSize: 1,\n                        displayFormats: {\n                            minute: 'HH:mm'\n                        }\n                    },\n                    ticks: {\n                        autoSkip: true,\n                        maxTicksLimit: 3,\n                        maxRotation: 0,\n                        minRotation: 0\n                    }\n                }],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }, {\n                    id: \"2\",\n                    display: false,\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n        \n        var maxValue = getMax(myChart);\n        myChart.options.scales.yAxes[0].ticks.max = maxValue + 10;\n        myChart.options.scales.yAxes[1].ticks.max = maxValue + 10;\n        \n        var minValue = getMin(myChart);\n        myChart.options.scales.yAxes[0].ticks.min = minValue - 10;\n        myChart.options.scales.yAxes[1].ticks.min = minValue - 10;\n    };\n\n    var getMax = function(chart) {\n        datasets = chart.data.datasets;\n        var maxValue = 0;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y > maxValue) {\n                    maxValue = d.y\n                }\n            })\n        }\n        return parseInt(maxValue);\n    }\n\n    var getMin = function(chart) {\n        datasets = chart.data.datasets;\n        var minValue = 1000;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y < minValue) {\n                    minValue = d.y\n                }\n            })\n        }\n        return parseInt(minValue);\n    }\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 584,
        "y": 40,
        "wires": [
            [
                "c5fb1a24.7b66e8"
            ]
        ]
    },
    {
        "id": "11824bd8.cb7d64",
        "type": "function",
        "z": "7f292261.86badc",
        "name": "Send temp",
        "func": "\nvar entryDate = new Date();\n\nvar temp_msg = {};\ntemp_msg.topic = \"Temp\";\ntemp_msg.payload = {x: entryDate, y: parseFloat(global.get(\"temp-MLT\").toFixed(1))};\n\nvar target_msg = {};\ntarget_msg.topic = \"Target\";\ntarget_msg.payload = {x: entryDate, y: global.get(\"mlt_target\", \"storeInFile\")};\n\nreturn [[target_msg, temp_msg]];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 344,
        "y": 91,
        "wires": [
            [
                "3f975313.47b78c",
                "c5fb1a24.7b66e8"
            ],
            [
                "3f975313.47b78c",
                "c5fb1a24.7b66e8"
            ]
        ]
    },
    {
        "id": "811c4d1.d4b10b",
        "type": "function",
        "z": "921f2684.926868",
        "name": "Send temp",
        "func": "\nvar entryDate = new Date();\n\nvar temp_msg = {};\ntemp_msg.topic = \"Temp\";\ntemp_msg.payload = {x: entryDate, y: parseFloat(global.get(\"temp-HLT\").toFixed(1))};\n\nvar target_msg = {};\ntarget_msg.topic = \"Target\";\ntarget_msg.payload = {x: entryDate, y: global.get(\"hlt_target\", \"storeInFile\")};\n\nreturn [[target_msg, temp_msg]];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 348,
        "y": 84,
        "wires": [
            [
                "b516c8eb.800748",
                "eba680ad.57fdf"
            ],
            [
                "b516c8eb.800748",
                "eba680ad.57fdf"
            ]
        ]
    },
    {
        "id": "b516c8eb.800748",
        "type": "ui_template",
        "z": "921f2684.926868",
        "group": "a0e00a00.81b428",
        "name": "HLT chart.js",
        "order": 6,
        "width": "6",
        "height": "4",
        "format": "<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"HLTChart\" width=\"300\" height=\"200\"></canvas>\n<script>\n(function() {\n    var chartID = \"HLTChart\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Target\",    // used here not by chart.js\n                label: \"Target\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 0,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Temp\",    // used here not by chart.js\n                label: \"Temp\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 0,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'minute',\n                        unitStepSize: 1,\n                        displayFormats: {\n                            minute: 'HH:mm'\n                        }\n                    },\n                    ticks: {\n                        autoSkip: true,\n                        maxTicksLimit: 3,\n                        maxRotation: 0,\n                        minRotation: 0\n                    }\n                }],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }, {\n                    id: \"2\",\n                    display: false,\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n        \n        var maxValue = getMax(myChart);\n        myChart.options.scales.yAxes[0].ticks.max = maxValue + 10;\n        myChart.options.scales.yAxes[1].ticks.max = maxValue + 10;\n        \n        var minValue = getMin(myChart);\n        myChart.options.scales.yAxes[0].ticks.min = minValue - 10;\n        myChart.options.scales.yAxes[1].ticks.min = minValue - 10;\n    };\n\n    var getMax = function(chart) {\n        datasets = chart.data.datasets;\n        var maxValue = 0;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y > maxValue) {\n                    maxValue = d.y\n                }\n            })\n        }\n        return parseInt(maxValue);\n    }\n\n    var getMin = function(chart) {\n        datasets = chart.data.datasets;\n        var minValue = 1000;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y < minValue) {\n                    minValue = d.y\n                }\n            })\n        }\n        return parseInt(minValue);\n    }\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 590,
        "y": 40,
        "wires": [
            [
                "eba680ad.57fdf"
            ]
        ]
    },
    {
        "id": "eba680ad.57fdf",
        "type": "function",
        "z": "921f2684.926868",
        "name": "HLTChart Helper",
        "func": "// A helper for the node-red chart.js template node\n// see the template node for the majority of the user defined data\n// here all that is needed is to setup values to limit the length of the chart\n// Firstly chartMaxPoints may be set non-zero and (for each channel) when the number\n// of points exceeds this value then the oldest samples will be discarded.\n// Alternatively (or in addition) if the x axis is time based then chartTimeSpan (milliseconds)\n// may be set and then old samples will be discarded to limit the chart to this time span.\n\nvar chartMaxPoints = 0;             //max no points in a chart before they drop off the left. Set to zero to disable\nvar chartTimeSpan = 60*60*1000;     //chart time span 4 mins. Set to zero to disable\n\n// ----------------------------------------------------------\n// You should not need to change anything below here\n\n// with inputs connected to the same nodes as a chart.js node this maintains a chart history\n// for preloading into the chart when it is opened in the browser\n\nvar topicsOfinterest = context.get('topicsOfInterest');    // can't use null here\nif (typeof topicsOfInterest == 'undefined') topicsOfInterest = null;\n\nvar msg2 = null;\nvar datasets = context.get('datasets') || [];\n// each dataset maps to a channel on the chart and consists of a hash with fields\n// topic: the topic name of the channel\n// data: an array of data points {x: x_value, y: y_value}\n// If msg.action == \"preload\" then the topic and payload are ignored and a message is passed\n// on containing the current chart data and msg.action still set to preload\n\nif (msg.action === \"preload\") {\n    // we should have been passed the topics of interest\n    topicsOfInterest = msg.topics;      // null if not provided\n    context.set('topicsOfInterest', topicsOfInterest);\n    // send a message containing the current chart data time range values, leave rest of msg as is\n    msg.payload = datasets;\n    msg.chartMaxPoints = chartMaxPoints;\n    msg.chartTimeSpan = chartTimeSpan;\n} else if (msg.action === \"restore\") {\n    // restoring from persistent memory\n    // step through the given datasets, if any\n    if (Array.isArray(msg.payload)) {\n        for (var i = 0; i < msg.payload.length; i++) {\n            topic = msg.payload[i].topic;\n            // find the matching topic\n            var found = false;\n            for (var k = 0; k < datasets.length; k++) {\n                if (datasets[k].topic == topic) {\n                    // insert the data in front of any that has been acquired since startup\n                    datasets[k].data = msg.payload[i].data.concat(datasets[k].data);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                // new topic so make a new dataset and fill it\n                datasets.push({topic: topic, data: msg.payload[i].data});\n            }\n        }\n    }\n    // remember that we have restored in order to enable future writes to persistent store\n    context.set(\"restored\", true);\n    // send a preload action to the chart\n    msg.action = \"preload\";\n    msg.payload = datasets;\n} else if (msg.action === \"load\") {\n    // replace existing data for matching topics\n    for (var j = 0; j < msg.payload.length; j++) {\n        var topic = msg.payload[j].topic;\n        // find it in the chart\n        found = false;\n        for (i = 0; i < datasets.length; i++) {\n            if (datasets[i].topic == topic) {\n                datasets[i].data = msg.payload[j].data;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset and fill it\n            datasets.push({topic: topic, data: msg.payload[j].data});\n        }\n    }\n    msg = null;         // don't send anything on\n} else {\n    // check whether the topic is one we are interested in\n    if (topicsOfInterest === null  || topicsOfInterest.indexOf(msg.topic) >= 0) {\n        found = false;\n        // find the right dataset if it already exists\n        for (i = 0; i < datasets.length; i++) {\n            dataset = datasets[i];\n            if (dataset.topic == msg.topic) {\n                found = true;\n                dataset.data.push(msg.payload);\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset\n            datasets.push({topic: msg.topic, data: [msg.payload]});\n        }\n    } else {\n        // ignore topics that are not of interest\n    }\n    // do not pass on a message to o/p 1, send the datasets to o/p 2 for persistent\n    // storage if required and we have been given data on startup\n    // this is to prevent the persistent store being overwritten before it has been read\n    msg = null;\n    if (context.get(\"restored\")) {\n        msg2 = {payload: datasets};\n    }\n}\n    \n// remove any points that are too old\nif (chartTimeSpan > 0) {\n    var now = new Date();\n    var oldestTimeAllowed = new Date();\n    oldestTimeAllowed.setTime(now.getTime() - (chartTimeSpan));\n    for (i = 0; i < datasets.length; i++) {\n        var data = datasets[i].data;\n        while (data.length > 0 ) {\n            // convert the x value (in place) to a Date if it is a string\n            if (typeof data[0].x === \"string\") {\n                data[0].x = new Date(data[0].x);\n            }            \n            if (data[0].x < oldestTimeAllowed) {\n                data.shift();\n            } else {\n                break;\n            }\n        }\n    }\n}\n// strip samples off the front if there are now too many\n// charTimeSpan == 0 implies don't do it\nif (chartMaxPoints > 0) {\n    var shifted = false;\n    for (i = 0; i < datasets.length; i++) {\n        data = datasets[i].data;\n        while(data.length > chartMaxPoints) {\n            data.shift();\n        }\n    }\n}\ncontext.set('datasets', datasets);\nreturn [msg,msg2];\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 120,
        "wires": [
            [
                "b516c8eb.800748"
            ],
            []
        ]
    },
    {
        "id": "6bd04cff.4d3574",
        "type": "function",
        "z": "78e2f0b5.5a802",
        "name": "Send values to chart",
        "func": "\nvar entryDate = new Date();\n\nvar temp_msg = {};\ntemp_msg.topic = \"Temp\";\ntemp_msg.payload = {x: entryDate, y: parseFloat(global.get(\"temp-BK\").toFixed(1))};\n\nvar target_msg = {};\ntarget_msg.topic = \"Target\";\ntarget_msg.payload = {x: entryDate, y: global.get(\"bk_target\", \"storeInFile\")};\n\nreturn [[target_msg, temp_msg]];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "c9472002.7fc0f",
                "b2783e22.2b8f"
            ],
            [
                "c9472002.7fc0f",
                "b2783e22.2b8f"
            ]
        ]
    },
    {
        "id": "c9472002.7fc0f",
        "type": "ui_template",
        "z": "78e2f0b5.5a802",
        "group": "9d59abb0.326b08",
        "name": "BK chart.js",
        "order": 7,
        "width": "6",
        "height": "4",
        "format": "<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"BKChart\" width=\"300\" height=\"200\"></canvas>\n<script>\n(function() {\n    var chartID = \"BKChart\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Target\",    // used here not by chart.js\n                label: \"Target\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 0,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Temp\",    // used here not by chart.js\n                label: \"Temp\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 0,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'minute',\n                        unitStepSize: 1,\n                        displayFormats: {\n                            minute: 'HH:mm'\n                        }\n                    },\n                    ticks: {\n                        autoSkip: true,\n                        maxTicksLimit: 3,\n                        maxRotation: 0,\n                        minRotation: 0\n                    }\n                }],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }, {\n                    id: \"2\",\n                    display: false,\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n        \n        var maxValue = getMax(myChart);\n        myChart.options.scales.yAxes[0].ticks.max = maxValue + 10;\n        myChart.options.scales.yAxes[1].ticks.max = maxValue + 10;\n        \n        var minValue = getMin(myChart);\n        myChart.options.scales.yAxes[0].ticks.min = minValue - 10;\n        myChart.options.scales.yAxes[1].ticks.min = minValue - 10;\n    };\n\n    var getMax = function(chart) {\n        datasets = chart.data.datasets;\n        var maxValue = 0;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y > maxValue) {\n                    maxValue = d.y\n                }\n            })\n        }\n        return parseInt(maxValue);\n    }\n\n    var getMin = function(chart) {\n        datasets = chart.data.datasets;\n        var minValue = 1000;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y < minValue) {\n                    minValue = d.y\n                }\n            })\n        }\n        return parseInt(minValue);\n    }\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 730,
        "y": 40,
        "wires": [
            [
                "b2783e22.2b8f"
            ]
        ]
    },
    {
        "id": "b2783e22.2b8f",
        "type": "function",
        "z": "78e2f0b5.5a802",
        "name": "BKChart Helper",
        "func": "// A helper for the node-red chart.js template node\n// see the template node for the majority of the user defined data\n// here all that is needed is to setup values to limit the length of the chart\n// Firstly chartMaxPoints may be set non-zero and (for each channel) when the number\n// of points exceeds this value then the oldest samples will be discarded.\n// Alternatively (or in addition) if the x axis is time based then chartTimeSpan (milliseconds)\n// may be set and then old samples will be discarded to limit the chart to this time span.\n\nvar chartMaxPoints = 0;             //max no points in a chart before they drop off the left. Set to zero to disable\nvar chartTimeSpan = 60*60*1000;     //chart time span 4 mins. Set to zero to disable\n\n// ----------------------------------------------------------\n// You should not need to change anything below here\n\n// with inputs connected to the same nodes as a chart.js node this maintains a chart history\n// for preloading into the chart when it is opened in the browser\n\nvar topicsOfinterest = context.get('topicsOfInterest');    // can't use null here\nif (typeof topicsOfInterest == 'undefined') topicsOfInterest = null;\n\nvar msg2 = null;\nvar datasets = context.get('datasets') || [];\n// each dataset maps to a channel on the chart and consists of a hash with fields\n// topic: the topic name of the channel\n// data: an array of data points {x: x_value, y: y_value}\n// If msg.action == \"preload\" then the topic and payload are ignored and a message is passed\n// on containing the current chart data and msg.action still set to preload\n\nif (msg.action === \"preload\") {\n    // we should have been passed the topics of interest\n    topicsOfInterest = msg.topics;      // null if not provided\n    context.set('topicsOfInterest', topicsOfInterest);\n    // send a message containing the current chart data time range values, leave rest of msg as is\n    msg.payload = datasets;\n    msg.chartMaxPoints = chartMaxPoints;\n    msg.chartTimeSpan = chartTimeSpan;\n} else if (msg.action === \"restore\") {\n    // restoring from persistent memory\n    // step through the given datasets, if any\n    if (Array.isArray(msg.payload)) {\n        for (var i = 0; i < msg.payload.length; i++) {\n            topic = msg.payload[i].topic;\n            // find the matching topic\n            var found = false;\n            for (var k = 0; k < datasets.length; k++) {\n                if (datasets[k].topic == topic) {\n                    // insert the data in front of any that has been acquired since startup\n                    datasets[k].data = msg.payload[i].data.concat(datasets[k].data);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                // new topic so make a new dataset and fill it\n                datasets.push({topic: topic, data: msg.payload[i].data});\n            }\n        }\n    }\n    // remember that we have restored in order to enable future writes to persistent store\n    context.set(\"restored\", true);\n    // send a preload action to the chart\n    msg.action = \"preload\";\n    msg.payload = datasets;\n} else if (msg.action === \"load\") {\n    // replace existing data for matching topics\n    for (var j = 0; j < msg.payload.length; j++) {\n        var topic = msg.payload[j].topic;\n        // find it in the chart\n        found = false;\n        for (i = 0; i < datasets.length; i++) {\n            if (datasets[i].topic == topic) {\n                datasets[i].data = msg.payload[j].data;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset and fill it\n            datasets.push({topic: topic, data: msg.payload[j].data});\n        }\n    }\n    msg = null;         // don't send anything on\n} else {\n    // check whether the topic is one we are interested in\n    if (topicsOfInterest === null  || topicsOfInterest.indexOf(msg.topic) >= 0) {\n        found = false;\n        // find the right dataset if it already exists\n        for (i = 0; i < datasets.length; i++) {\n            dataset = datasets[i];\n            if (dataset.topic == msg.topic) {\n                found = true;\n                dataset.data.push(msg.payload);\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset\n            datasets.push({topic: msg.topic, data: [msg.payload]});\n        }\n    } else {\n        // ignore topics that are not of interest\n    }\n    // do not pass on a message to o/p 1, send the datasets to o/p 2 for persistent\n    // storage if required and we have been given data on startup\n    // this is to prevent the persistent store being overwritten before it has been read\n    msg = null;\n    if (context.get(\"restored\")) {\n        msg2 = {payload: datasets};\n    }\n}\n    \n// remove any points that are too old\nif (chartTimeSpan > 0) {\n    var now = new Date();\n    var oldestTimeAllowed = new Date();\n    oldestTimeAllowed.setTime(now.getTime() - (chartTimeSpan));\n    for (i = 0; i < datasets.length; i++) {\n        var data = datasets[i].data;\n        while (data.length > 0 ) {\n            // convert the x value (in place) to a Date if it is a string\n            if (typeof data[0].x === \"string\") {\n                data[0].x = new Date(data[0].x);\n            }            \n            if (data[0].x < oldestTimeAllowed) {\n                data.shift();\n            } else {\n                break;\n            }\n        }\n    }\n}\n// strip samples off the front if there are now too many\n// charTimeSpan == 0 implies don't do it\nif (chartMaxPoints > 0) {\n    var shifted = false;\n    for (i = 0; i < datasets.length; i++) {\n        data = datasets[i].data;\n        while(data.length > chartMaxPoints) {\n            data.shift();\n        }\n    }\n}\ncontext.set('datasets', datasets);\nreturn [msg,msg2];\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 120,
        "wires": [
            [
                "c9472002.7fc0f"
            ],
            []
        ]
    },
    {
        "id": "626ba097.1350e",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "reset pump button",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 1760,
        "wires": [
            [
                "35c856bc.ac4daa"
            ]
        ]
    },
    {
        "id": "35c856bc.ac4daa",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "82b7a3f0.12d99"
        ],
        "x": 395,
        "y": 1760,
        "wires": []
    },
    {
        "id": "2c5906f6.9a581a",
        "type": "ui_ui_control",
        "z": "e58cd1d0.00b6",
        "name": "",
        "events": "all",
        "x": 590,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e29c5322.5279c",
        "type": "ui_button",
        "z": "e58cd1d0.00b6",
        "name": "",
        "group": "ba76eae3.a07d28",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "General",
        "tooltip": "",
        "color": "#757575",
        "bgcolor": "white",
        "icon": "",
        "payload": "7",
        "payloadType": "num",
        "topic": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "2c5906f6.9a581a"
            ]
        ]
    },
    {
        "id": "2238fe8f.a012d2",
        "type": "ui_button",
        "z": "e58cd1d0.00b6",
        "name": "",
        "group": "226e9c90.894b14",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "#757575",
        "bgcolor": "#e0e0e0",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "2c5906f6.9a581a"
            ]
        ]
    },
    {
        "id": "ec370d50.dc2eb",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Calc guage value",
        "func": "\nvar output = parseFloat(flow.get(\"MLT_Element__kW\", \"storeInFile\") * (msg.payload/100)).toFixed(1);\nmsg = { payload:output };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 460,
        "wires": [
            [
                "f0d7b6c7.05c6d8"
            ]
        ]
    },
    {
        "id": "3ada9c1.daaf864",
        "type": "ui_numeric",
        "z": "696aae1c.d3b45",
        "name": "",
        "label": "Element (kW)",
        "tooltip": "",
        "group": "99bd808a.f2698",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "x": 420,
        "y": 340,
        "wires": [
            [
                "6970ab65.767d74"
            ]
        ]
    },
    {
        "id": "a5a23500.f3c068",
        "type": "inject",
        "z": "696aae1c.d3b45",
        "name": "Load MLT Element KW value",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::MLT_Element__kW",
        "payloadType": "flow",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "3ada9c1.daaf864"
            ]
        ]
    },
    {
        "id": "6970ab65.767d74",
        "type": "change",
        "z": "696aae1c.d3b45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::MLT_Element__kW",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 340,
        "wires": [
            [
                "9d62094b.1b5e48"
            ]
        ]
    },
    {
        "id": "9d62094b.1b5e48",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Set guage max",
        "func": "msg = { ui_control:{max:msg.payload}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 340,
        "wires": [
            [
                "f0d7b6c7.05c6d8"
            ]
        ]
    },
    {
        "id": "7873a92a.131548",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Set guage max",
        "func": "msg = { ui_control:{max:flow.get(\"MLT_Element__kW\", \"storeInFile\")}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 420,
        "wires": [
            [
                "f0d7b6c7.05c6d8"
            ]
        ]
    },
    {
        "id": "ff1ff244.11ade",
        "type": "ui_numeric",
        "z": "696aae1c.d3b45",
        "name": "",
        "label": "Element (kW)",
        "tooltip": "",
        "group": "96ccbe54.5ee14",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "ccd0d6cc.28c708"
            ]
        ]
    },
    {
        "id": "5635bbfb.aaf544",
        "type": "inject",
        "z": "696aae1c.d3b45",
        "name": "Load HLT Element value",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::HLT_Element__kW",
        "payloadType": "flow",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "ff1ff244.11ade"
            ]
        ]
    },
    {
        "id": "ccd0d6cc.28c708",
        "type": "change",
        "z": "696aae1c.d3b45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::HLT_Element__kW",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "dc80b88c.eeb138"
            ]
        ]
    },
    {
        "id": "dc80b88c.eeb138",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Set guage max",
        "func": "msg = { ui_control:{max:msg.payload}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 80,
        "wires": [
            [
                "8f5737fb.d94198"
            ]
        ]
    },
    {
        "id": "f389a098.7537c",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Calc guage value",
        "func": "\nvar output = parseFloat(flow.get(\"HLT_Element__kW\", \"storeInFile\") * (msg.payload/100)).toFixed(1);\n\nmsg = { payload:output };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 180,
        "wires": [
            [
                "8f5737fb.d94198"
            ]
        ]
    },
    {
        "id": "ce07610f.c0a99",
        "type": "inject",
        "z": "696aae1c.d3b45",
        "name": "Init guages",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "3a975f71.4ea64",
                "7873a92a.131548",
                "98650fa1.b3d9d"
            ]
        ]
    },
    {
        "id": "3a975f71.4ea64",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Set guage max",
        "func": "msg = { ui_control:{max:flow.get(\"HLT_Element__kW\", \"storeInFile\")}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 140,
        "wires": [
            [
                "8f5737fb.d94198"
            ]
        ]
    },
    {
        "id": "bd0a42dc.68922",
        "type": "ui_numeric",
        "z": "696aae1c.d3b45",
        "name": "",
        "label": "Element (kW)",
        "tooltip": "",
        "group": "e71aa9ca.9bbda8",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "x": 380,
        "y": 640,
        "wires": [
            [
                "51fc1618.309428"
            ]
        ]
    },
    {
        "id": "e73731c8.a6a28",
        "type": "inject",
        "z": "696aae1c.d3b45",
        "name": "Load BK Element value",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::BK_Element__kW",
        "payloadType": "flow",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "bd0a42dc.68922"
            ]
        ]
    },
    {
        "id": "51fc1618.309428",
        "type": "change",
        "z": "696aae1c.d3b45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BK_Element__kW",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 640,
        "wires": [
            [
                "25763128.5524de"
            ]
        ]
    },
    {
        "id": "25763128.5524de",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Set guage max",
        "func": "msg = { ui_control:{max:msg.payload}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 640,
        "wires": [
            [
                "490fe15a.3061a"
            ]
        ]
    },
    {
        "id": "98650fa1.b3d9d",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Set guage max",
        "func": "msg = { ui_control:{max:flow.get(\"BK_Element__kW\", \"storeInFile\")}};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 820,
        "wires": [
            [
                "490fe15a.3061a"
            ]
        ]
    },
    {
        "id": "3891981c.59a838",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "Calc guage value",
        "func": "\nvar output = parseFloat(flow.get(\"BK_Element__kW\", \"storeInFile\") * (msg.payload/100)).toFixed(1);\n\nmsg = { payload:output };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 760,
        "wires": [
            [
                "490fe15a.3061a"
            ]
        ]
    },
    {
        "id": "8aca9098.5ae53",
        "type": "rpi-gpio out",
        "z": "696aae1c.d3b45",
        "name": "BK GPIO",
        "pin": "40",
        "set": "",
        "level": "0",
        "freq": "1",
        "out": "pwm",
        "x": 380,
        "y": 700,
        "wires": []
    },
    {
        "id": "69e856b9.23bac8",
        "type": "exec",
        "z": "696aae1c.d3b45",
        "command": "sudo python /home/pi/.node-red/projects/brew3/gpio.py",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "gpio.py",
        "x": 580,
        "y": 500,
        "wires": [
            [
                "c194435.3429bc"
            ],
            [
                "c194435.3429bc"
            ],
            [
                "c194435.3429bc"
            ]
        ]
    },
    {
        "id": "d0223b4.d1222c8",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "GPIO python setup",
        "func": "var dutyCycle = msg.payload*2;\nvar mlt_element_gpio = flow.get(\"mlt_element_gpio\", \"storeInFile\");\n\nmsg.payload = mlt_element_gpio + \" 0 0\";\n\nif (dutyCycle > 0) {\n    msg.payload = mlt_element_gpio + \" 1 \" + dutyCycle;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 500,
        "wires": [
            [
                "69e856b9.23bac8"
            ]
        ]
    },
    {
        "id": "c194435.3429bc",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "mlt_element_gpio py output",
        "func": "\nnode.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "43f583ce.037b7c",
        "type": "ui_numeric",
        "z": "696aae1c.d3b45",
        "name": "",
        "label": "Element GPIO",
        "tooltip": "",
        "group": "96ccbe54.5ee14",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": "1",
        "x": 390,
        "y": 40,
        "wires": [
            [
                "b9d2788c.0b1468"
            ]
        ]
    },
    {
        "id": "bfc5f605.01cf58",
        "type": "inject",
        "z": "696aae1c.d3b45",
        "name": "Load HLT ELement GPIO",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::hlt_element_gpio",
        "payloadType": "flow",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "43f583ce.037b7c"
            ]
        ]
    },
    {
        "id": "b9d2788c.0b1468",
        "type": "change",
        "z": "696aae1c.d3b45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::hlt_element_gpio",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "83d716cb.4cf388",
        "type": "ui_numeric",
        "z": "696aae1c.d3b45",
        "name": "",
        "label": "Element GPIO",
        "tooltip": "",
        "group": "99bd808a.f2698",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": "1",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "47b498a9.162348"
            ]
        ]
    },
    {
        "id": "904d6c7b.879cb",
        "type": "inject",
        "z": "696aae1c.d3b45",
        "name": "Load MLT Element GPIO",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::mlt_element_gpio",
        "payloadType": "flow",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "83d716cb.4cf388"
            ]
        ]
    },
    {
        "id": "47b498a9.162348",
        "type": "change",
        "z": "696aae1c.d3b45",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mlt_element_gpio",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3239dee7.fe3402",
        "type": "function",
        "z": "c68db1a2.68e94",
        "name": "GPIO python setup",
        "func": "\nif (msg.payload)\n    msg.payload = flow.get(\"mlt_pump_gpio\", \"storeInFile\") + \" 1 200\"\nelse\n    msg.payload = flow.get(\"mlt_pump_gpio\", \"storeInFile\") + \" 0 0\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 546,
        "y": 320,
        "wires": [
            [
                "c52363bc.90708",
                "87bf2eba.2a9a4"
            ]
        ]
    },
    {
        "id": "c52363bc.90708",
        "type": "exec",
        "z": "c68db1a2.68e94",
        "command": "sudo python /home/pi/.node-red/projects/brew3/gpio.py",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "gpio.py",
        "x": 776,
        "y": 288,
        "wires": [
            [
                "87bf2eba.2a9a4"
            ],
            [
                "87bf2eba.2a9a4"
            ],
            []
        ]
    },
    {
        "id": "e063efd8.3cfff",
        "type": "inject",
        "z": "c68db1a2.68e94",
        "name": "Load MLT Pump GPIO",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::mlt_pump_gpio",
        "payloadType": "flow",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "fc217ff2.da25b"
            ]
        ]
    },
    {
        "id": "fc217ff2.da25b",
        "type": "ui_numeric",
        "z": "c68db1a2.68e94",
        "name": "",
        "label": "Pump GPIO",
        "tooltip": "",
        "group": "99bd808a.f2698",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": "1",
        "x": 450,
        "y": 240,
        "wires": [
            [
                "5cd92e81.da883"
            ]
        ]
    },
    {
        "id": "5cd92e81.da883",
        "type": "change",
        "z": "c68db1a2.68e94",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mlt_pump_gpio",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "87bf2eba.2a9a4",
        "type": "function",
        "z": "c68db1a2.68e94",
        "name": "pump gpio",
        "func": "node.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 966,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "debf580.848c9a8",
        "type": "inject",
        "z": "3b1619f7.77f936",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 131,
        "y": 60,
        "wires": [
            [
                "f275acdb.0832d"
            ]
        ]
    },
    {
        "id": "cc3615ae.d2d498",
        "type": "ui_button",
        "z": "3b1619f7.77f936",
        "name": "",
        "group": "e010af88.2414c",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Refresh from BC",
        "tooltip": "",
        "color": "#757575",
        "bgcolor": "#e0e0e0",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 121,
        "y": 100,
        "wires": [
            [
                "f275acdb.0832d"
            ]
        ]
    },
    {
        "id": "8d183899.fe58e8",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "transform options",
        "func": "var options = msg.payload.map(function(batch) {\n    var label = batch.Name;\n    var option = {};\n    option[label] = batch.BoilLogId;\n    return option;\n});\n\nmsg.options = options;\n\n// For some reason Node-Red injects values into dropdown with extra quotes\nmsg.payload = \"\\\"\" + global.get(\"selected_batch_id\", \"storeInFile\") + \"\\\"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 120,
        "wires": [
            [
                "848a178b.c3a9f8",
                "a1fd4ea2.3f349"
            ]
        ]
    },
    {
        "id": "848a178b.c3a9f8",
        "type": "ui_dropdown",
        "z": "3b1619f7.77f936",
        "name": "Boil Session",
        "label": "",
        "tooltip": "",
        "place": "Select boil session",
        "group": "e010af88.2414c",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "x": 740,
        "y": 180,
        "wires": [
            [
                "9c70b52c.28cce8"
            ]
        ]
    },
    {
        "id": "9c70b52c.28cce8",
        "type": "change",
        "z": "3b1619f7.77f936",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::selected_batch_id",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3780238.01e18dc",
        "type": "debug",
        "z": "3b1619f7.77f936",
        "d": true,
        "name": "BC get payload",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "f275acdb.0832d",
        "type": "brewers-chronicle-get",
        "z": "3b1619f7.77f936",
        "name": "Get BC Boil Sessions",
        "getmethod": "BoilSessions",
        "x": 391,
        "y": 80,
        "wires": [
            [
                "8d183899.fe58e8",
                "3780238.01e18dc"
            ]
        ]
    },
    {
        "id": "a1fd4ea2.3f349",
        "type": "debug",
        "z": "3b1619f7.77f936",
        "d": true,
        "name": "transform payload",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 120,
        "wires": []
    },
    {
        "id": "c84e4b37.c4b2f8",
        "type": "inject",
        "z": "3b1619f7.77f936",
        "name": "Inject selected_batch_id",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::selected_batch_id",
        "payloadType": "global",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "848a178b.c3a9f8"
            ]
        ]
    },
    {
        "id": "f930ebd2.631518",
        "type": "ui_button",
        "z": "3b1619f7.77f936",
        "name": "",
        "group": "e010af88.2414c",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Load It!",
        "tooltip": "",
        "color": "#757575",
        "bgcolor": "#e0e0e0",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 80,
        "y": 420,
        "wires": [
            [
                "9b1c0fbf.b9ece"
            ]
        ]
    },
    {
        "id": "1a7eff40.dd4141",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "take first batch",
        "func": "\nvar count = msg.payload.MashStepCount;\nif (count == 0)\n    node.warn(\"dffd\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 420,
        "wires": [
            [
                "535f30fe.ae1b5",
                "432f1e4d.5fc25",
                "b982638.c4692a",
                "73066877.efe238"
            ]
        ]
    },
    {
        "id": "362164a2.9e1c6c",
        "type": "debug",
        "z": "3b1619f7.77f936",
        "name": "boil session info payload",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 500,
        "wires": []
    },
    {
        "id": "535f30fe.ae1b5",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "num of mash steps",
        "func": "var count = msg.payload.MashStepCount;\nmsg.payload = count;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 320,
        "wires": [
            [
                "f819f0cd.fa874"
            ]
        ]
    },
    {
        "id": "432f1e4d.5fc25",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "step times",
        "func": "var batch = msg.payload;\nvar numOfSteps = batch.MashStepCount;\nvar times = [{payload: 0}, null, null, null]\n\nfor (var i = 0; i <= numOfSteps-1; i++) {\n    times[i] = { payload: batch.MashSteps[i].StepTime }\n}\n\nreturn times;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 380,
        "wires": [
            [
                "152f6dff.5390c2"
            ],
            [
                "47d5b44b.6e6eec"
            ],
            [
                "afeb2e1.920b4d"
            ],
            [
                "9de3c754.ae99c8"
            ]
        ]
    },
    {
        "id": "b982638.c4692a",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "step temps",
        "func": "var batch = msg.payload;\nvar temps = batch.MashSteps.map(function(step) {\n    return { payload: step.StepTemp }\n});\nreturn temps;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 730,
        "y": 460,
        "wires": [
            [
                "7e351393.a9e04c"
            ],
            [
                "17103840.176778"
            ],
            [
                "a8532783.441e48"
            ],
            [
                "a02e6a3f.3a25a8"
            ]
        ]
    },
    {
        "id": "73066877.efe238",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "recipe info",
        "func": "var batch = msg.payload;\nmsg.batchName = batch.Name;\nmsg.beerStyle = batch.Style;\n\n//msg.batchNumber = batch.batchNo;\n//msg.recipeName = batch.recipe.name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "e36b8f38.088eb"
            ]
        ]
    },
    {
        "id": "e36b8f38.088eb",
        "type": "ui_template",
        "z": "3b1619f7.77f936",
        "group": "e010af88.2414c",
        "name": "",
        "order": 5,
        "width": 6,
        "height": 2,
        "format": "<div style=\"text-align: center\">\n    <span>{{msg.batchName}}</span><br />\n    <span>{{msg.beerStyle}}</span>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 920,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ac370479.091f58",
        "type": "inject",
        "z": "3b1619f7.77f936",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 740,
        "y": 600,
        "wires": [
            [
                "e36b8f38.088eb"
            ]
        ]
    },
    {
        "id": "9b1c0fbf.b9ece",
        "type": "brewers-chronicle-get",
        "z": "3b1619f7.77f936",
        "name": "Get BC boil session info",
        "getmethod": "BoilSessionInfo",
        "x": 270,
        "y": 420,
        "wires": [
            [
                "1a7eff40.dd4141",
                "362164a2.9e1c6c"
            ]
        ]
    },
    {
        "id": "f819f0cd.fa874",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "",
        "links": [
            "72399970.c8c148"
        ],
        "x": 875,
        "y": 320,
        "wires": []
    },
    {
        "id": "152f6dff.5390c2",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Rest 1",
        "links": [
            "9d174681.47c718"
        ],
        "x": 855,
        "y": 360,
        "wires": []
    },
    {
        "id": "47d5b44b.6e6eec",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Rest 2",
        "links": [
            "deafe85c.da1e98"
        ],
        "x": 895,
        "y": 380,
        "wires": []
    },
    {
        "id": "afeb2e1.920b4d",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Rest 3",
        "links": [
            "c8ecb74a.a53358"
        ],
        "x": 935,
        "y": 400,
        "wires": []
    },
    {
        "id": "9de3c754.ae99c8",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Rest 4",
        "links": [
            "68dc6c2.b4d4894"
        ],
        "x": 855,
        "y": 420,
        "wires": []
    },
    {
        "id": "7e351393.a9e04c",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Temp 1",
        "links": [
            "1531a2dc.84956d"
        ],
        "x": 855,
        "y": 440,
        "wires": []
    },
    {
        "id": "17103840.176778",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Temp 2",
        "links": [
            "f4a1e90b.071b58"
        ],
        "x": 895,
        "y": 460,
        "wires": []
    },
    {
        "id": "a8532783.441e48",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Temp 3",
        "links": [
            "9d80444a.fb5c38"
        ],
        "x": 935,
        "y": 480,
        "wires": []
    },
    {
        "id": "a02e6a3f.3a25a8",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Load Set Temp 4",
        "links": [
            "e6aa6b97.e9dfc8"
        ],
        "x": 855,
        "y": 500,
        "wires": []
    },
    {
        "id": "95213529.4c0b58",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "Trigger BC step started post",
        "links": [
            "a095af0d.a1596",
            "8afdb897.097a38"
        ],
        "x": 2415,
        "y": 2240,
        "wires": []
    },
    {
        "id": "112b1f55.964e41",
        "type": "ui_toast",
        "z": "3b1619f7.77f936",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 300,
        "y": 280,
        "wires": []
    },
    {
        "id": "789f1481.0abe9c",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1100,
        "y": 960,
        "wires": [
            [
                "b5d35932.4c40a8"
            ]
        ]
    },
    {
        "id": "46c9a462.3f9a2c",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "BrewMode",
        "property": "#:(storeInFile)::BrewMode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "TriggerRampToStrike",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RampToStrike",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "WaitingToMashIn",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TriggerMashing",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Mashing",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 910,
        "y": 960,
        "wires": [
            [
                "789f1481.0abe9c"
            ],
            [
                "789f1481.0abe9c"
            ],
            [
                "789f1481.0abe9c"
            ],
            [
                "789f1481.0abe9c"
            ],
            [
                "789f1481.0abe9c"
            ]
        ]
    },
    {
        "id": "cadd817e.c3dd7",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Ramping to mash step 1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2134,
        "wires": [
            [
                "cb8c4d03.92d6a"
            ]
        ]
    },
    {
        "id": "4bf98a97.084784",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set rest1 values",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest1_temp",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "#:(storeInFile)::ActiveMashStep",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 2173,
        "wires": [
            [
                "48fca837.ba4f98",
                "a6a40ab8.032d38"
            ]
        ]
    },
    {
        "id": "94535516.630068",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest1_length!=0",
        "property": "#:(storeInFile)::rest1_length",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2200,
        "wires": [
            [
                "69fa7360.45d3bc"
            ]
        ]
    },
    {
        "id": "69fa7360.45d3bc",
        "type": "switch",
        "z": "3da984a3.27885c",
        "name": "rest1_time!=0",
        "property": "#:(storeInFile)::rest1_time",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 940,
        "y": 2140,
        "wires": [
            [
                "cadd817e.c3dd7",
                "4bf98a97.084784"
            ]
        ]
    },
    {
        "id": "7e559ef7.58ff4",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::ActiveMashStep",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 2080,
        "wires": [
            [
                "94535516.630068"
            ]
        ]
    },
    {
        "id": "527a019a.9ca",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set mash step timer",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest2_length",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 2200,
        "wires": [
            [
                "82704aac.e7d888",
                "95213529.4c0b58"
            ]
        ]
    },
    {
        "id": "2d787dd2.3b6ff2",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Mash step 2 activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 2240,
        "wires": [
            [
                "b2b5cee6.25e58"
            ]
        ]
    },
    {
        "id": "39817463.09ffec",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Set mash step timer",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(storeInFile)::rest1_length",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 2120,
        "wires": [
            [
                "95213529.4c0b58",
                "82704aac.e7d888"
            ]
        ]
    },
    {
        "id": "b71c77aa.fd94a8",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Mash step 1 activated",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 2160,
        "wires": [
            [
                "b2b5cee6.25e58"
            ]
        ]
    },
    {
        "id": "c16a6009.a676a",
        "type": "delay",
        "z": "3da984a3.27885c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 700,
        "y": 960,
        "wires": [
            [
                "46c9a462.3f9a2c"
            ]
        ]
    },
    {
        "id": "7716c831.ab1838",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "brewMode=  Mashing",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "Mashing",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 2020,
        "wires": [
            [
                "7e559ef7.58ff4"
            ]
        ]
    },
    {
        "id": "74b736f7.ae19e8",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Run button colour",
        "links": [],
        "x": 115,
        "y": 1560,
        "wires": [
            [
                "a7ae319b.72afe"
            ]
        ]
    },
    {
        "id": "a7ae319b.72afe",
        "type": "ui_button",
        "z": "3da984a3.27885c",
        "name": "",
        "group": "6c2dc2b5.3e20ac",
        "order": 3,
        "width": "8",
        "height": 1,
        "passthru": false,
        "label": "Mash completed",
        "tooltip": "",
        "color": "",
        "bgcolor": "gray",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 240,
        "y": 1560,
        "wires": [
            [
                "4c1b9d3e.b9cc44",
                "559aaa39.eb8b14",
                "52c2d745.9831d8",
                "b2947df3.2afc9",
                "62da4d6.20425b4"
            ]
        ]
    },
    {
        "id": "4c1b9d3e.b9cc44",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::BrewMode",
                "pt": "global",
                "to": "Boil",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1560,
        "wires": [
            [
                "6ce02d0f.3f0894"
            ]
        ]
    },
    {
        "id": "6ce02d0f.3f0894",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "5cbd56e2.72cf08"
        ],
        "x": 635,
        "y": 1560,
        "wires": []
    },
    {
        "id": "62da4d6.20425b4",
        "type": "brewers-chronicle-post",
        "z": "3da984a3.27885c",
        "name": "BC Post Mash completed",
        "readingtype": "14",
        "readingvalue": "",
        "readingvaluetype": "msg",
        "x": 470,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "8afdb897.097a38",
        "type": "link in",
        "z": "3b1619f7.77f936",
        "name": "BC Mash Step Started In",
        "links": [
            "95213529.4c0b58",
            "1a9b0e70.aa8122"
        ],
        "x": 195,
        "y": 760,
        "wires": [
            [
                "d560fa2f.c89d08"
            ]
        ]
    },
    {
        "id": "d560fa2f.c89d08",
        "type": "brewers-chronicle-post",
        "z": "3b1619f7.77f936",
        "name": "BC Mash step started",
        "readingtype": "15",
        "readingvalue": "#:(storeInFile)::mlt_target",
        "readingvaluetype": "global",
        "x": 340,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f0c591b0.7b74f",
        "type": "comment",
        "z": "3b1619f7.77f936",
        "name": "BC Mash schedule integration",
        "info": "",
        "x": 160,
        "y": 660,
        "wires": []
    },
    {
        "id": "308d85da.17b23a",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "BC Mash started post",
        "links": [
            "699d4238.c2af5c",
            "78702659.7bd238"
        ],
        "x": 455,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8c9d1790.d60d98",
        "type": "brewers-chronicle-post",
        "z": "3b1619f7.77f936",
        "name": "BC post Mash Started",
        "readingtype": "13",
        "readingvalue": "",
        "readingvaluetype": "msg",
        "x": 340,
        "y": 720,
        "wires": [
            [
                "d8973acc.197af8"
            ]
        ]
    },
    {
        "id": "d8973acc.197af8",
        "type": "brewers-chronicle-post",
        "z": "3b1619f7.77f936",
        "name": "BC post Mash-in temp",
        "readingtype": "17",
        "readingvalue": "strikeTemp",
        "readingvaluetype": "global",
        "x": 580,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "78702659.7bd238",
        "type": "link in",
        "z": "3b1619f7.77f936",
        "name": "BC Mash Started link in",
        "links": [
            "308d85da.17b23a"
        ],
        "x": 195,
        "y": 720,
        "wires": [
            [
                "8c9d1790.d60d98"
            ]
        ]
    },
    {
        "id": "19c568e8.9f4b77",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "BC Stp ended post",
        "links": [
            "22a036e2.d7a83a",
            "ebf8e7cb.47b3e8"
        ],
        "x": 255,
        "y": 2200,
        "wires": []
    },
    {
        "id": "2f3e0a23.f2f9e6",
        "type": "brewers-chronicle-post",
        "z": "3b1619f7.77f936",
        "name": "BC Post Mash step ended",
        "readingtype": "16",
        "readingvalue": "",
        "readingvaluetype": "msg",
        "x": 350,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "ebf8e7cb.47b3e8",
        "type": "link in",
        "z": "3b1619f7.77f936",
        "name": "BC Mash Ended Post Link In",
        "links": [
            "19c568e8.9f4b77"
        ],
        "x": 195,
        "y": 800,
        "wires": [
            [
                "2f3e0a23.f2f9e6"
            ]
        ]
    },
    {
        "id": "b5d35932.4c40a8",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "BC Post target and temp",
        "links": [
            "768bd4b6.32e02c",
            "2392bdc0.bf7712"
        ],
        "x": 1215,
        "y": 960,
        "wires": []
    },
    {
        "id": "efc61586.5eefc8",
        "type": "link in",
        "z": "3da984a3.27885c",
        "name": "Mash schedule target and temp recording loop",
        "links": [
            "8925ed74.47da4",
            "1401064c.2d828a"
        ],
        "x": 775,
        "y": 1020,
        "wires": [
            [
                "46c9a462.3f9a2c"
            ]
        ]
    },
    {
        "id": "ee502586.24ce08",
        "type": "brewers-chronicle-post",
        "z": "3b1619f7.77f936",
        "name": "BC Post Target temp",
        "readingtype": "18",
        "readingvalue": "#:(storeInFile)::mlt_target",
        "readingvaluetype": "global",
        "x": 340,
        "y": 860,
        "wires": [
            [
                "123362e7.01b26d"
            ]
        ]
    },
    {
        "id": "123362e7.01b26d",
        "type": "brewers-chronicle-post",
        "z": "3b1619f7.77f936",
        "name": "BC Post temp",
        "readingtype": "19",
        "readingvalue": "temp-MLT",
        "readingvaluetype": "global",
        "x": 540,
        "y": 860,
        "wires": [
            [
                "1401064c.2d828a",
                "f631c8dd.d8ea38"
            ]
        ]
    },
    {
        "id": "2392bdc0.bf7712",
        "type": "link in",
        "z": "3b1619f7.77f936",
        "name": "BC Target and Temp Post Link In",
        "links": [
            "b5d35932.4c40a8"
        ],
        "x": 195,
        "y": 860,
        "wires": [
            [
                "ee502586.24ce08"
            ]
        ]
    },
    {
        "id": "1401064c.2d828a",
        "type": "link out",
        "z": "3b1619f7.77f936",
        "name": "BC Recording to Mash schedule target temp logging loop",
        "links": [
            "efc61586.5eefc8"
        ],
        "x": 675,
        "y": 860,
        "wires": []
    },
    {
        "id": "31854d6c.1a0362",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "GPIO python setup",
        "func": "var dutyCycle = msg.payload*2;\nvar hlt_element_gpio = flow.get(\"hlt_element_gpio\", \"storeInFile\");\n\nmsg.payload = hlt_element_gpio + \" 0 0\";\n\nif (dutyCycle > 0) {\n    msg.payload = hlt_element_gpio + \" 1 \" + dutyCycle;\n}\n\nnode.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "b125af48.8640b"
            ]
        ]
    },
    {
        "id": "b125af48.8640b",
        "type": "exec",
        "z": "696aae1c.d3b45",
        "command": "sudo python /home/pi/.node-red/projects/brew3/gpio.py",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "gpio.py",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "32d17b71.9a1524"
            ],
            [
                "32d17b71.9a1524"
            ],
            [
                "32d17b71.9a1524"
            ]
        ]
    },
    {
        "id": "32d17b71.9a1524",
        "type": "function",
        "z": "696aae1c.d3b45",
        "name": "hlt_element_gpio py output",
        "func": "\nnode.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f631c8dd.d8ea38",
        "type": "function",
        "z": "3b1619f7.77f936",
        "name": "Post temps to BC",
        "func": "\nnode.log(\"posting target and temp\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "32d4b6c.e63434a",
        "type": "change",
        "z": "3da984a3.27885c",
        "name": "Template msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1480,
        "wires": [
            [
                "149345ed.691a4a"
            ]
        ]
    },
    {
        "id": "149345ed.691a4a",
        "type": "link out",
        "z": "3da984a3.27885c",
        "name": "",
        "links": [
            "959da750.2a46a8"
        ],
        "x": 815,
        "y": 1480,
        "wires": []
    },
    {
        "id": "4e3101c4.4292f",
        "type": "debug",
        "z": "34bce47d.6c8dac",
        "name": "hlt temp",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 200,
        "wires": []
    },
    {
        "id": "c788fa64.85dad8",
        "type": "ui_numeric",
        "z": "7f292261.86badc",
        "name": "",
        "label": "Target",
        "tooltip": "",
        "group": "ea5e6691.a9d4b8",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "20",
        "max": "100",
        "step": 1,
        "x": 324,
        "y": 448,
        "wires": [
            [
                "c093d20d.9045a",
                "f753aaa0.4acb98",
                "1d1d7650.6ae5fa"
            ]
        ]
    },
    {
        "id": "7f86574c.32cd68",
        "type": "ui_numeric",
        "z": "7f292261.86badc",
        "name": "",
        "label": "Manual",
        "tooltip": "",
        "group": "ea5e6691.a9d4b8",
        "order": 5,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "20",
        "max": "100",
        "step": 1,
        "x": 528,
        "y": 320,
        "wires": [
            [
                "3d3c44d8.0aa2ec"
            ]
        ]
    },
    {
        "id": "2157eaab.7f77d6",
        "type": "ui_numeric",
        "z": "921f2684.926868",
        "name": "",
        "label": "Manual",
        "tooltip": "",
        "group": "a0e00a00.81b428",
        "order": 5,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "20",
        "max": "100",
        "step": 1,
        "x": 520,
        "y": 320,
        "wires": [
            [
                "6d936cd7.b504e4"
            ]
        ]
    },
    {
        "id": "9a324627.037e28",
        "type": "ui_numeric",
        "z": "921f2684.926868",
        "name": "",
        "label": "Target",
        "tooltip": "",
        "group": "a0e00a00.81b428",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "20",
        "max": "100",
        "step": 1,
        "x": 330,
        "y": 450,
        "wires": [
            [
                "949c5578.12c3c8",
                "a49e6078.923ba",
                "fc678f03.52e16"
            ]
        ]
    },
    {
        "id": "d934cd31.c948d",
        "type": "ui_numeric",
        "z": "78e2f0b5.5a802",
        "name": "",
        "label": "Manual",
        "tooltip": "",
        "group": "9d59abb0.326b08",
        "order": 6,
        "width": "0",
        "height": "0",
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "20",
        "max": "100",
        "step": 1,
        "x": 260,
        "y": 360,
        "wires": [
            [
                "5255e2e3.2740fc"
            ]
        ]
    },
    {
        "id": "68c04583.20dbbc",
        "type": "ui_numeric",
        "z": "78e2f0b5.5a802",
        "name": "",
        "label": "Target",
        "tooltip": "",
        "group": "9d59abb0.326b08",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "20",
        "max": "100",
        "step": 1,
        "x": 250,
        "y": 500,
        "wires": [
            [
                "d65af15e.7a91c",
                "76fa4d08.464e54",
                "ea3830cd.2dda"
            ]
        ]
    },
    {
        "id": "7f2d23b2.754b4c",
        "type": "inject",
        "z": "c68db1a2.68e94",
        "name": "Load HLT Pump GPIO",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::hlt_pump_gpio",
        "payloadType": "flow",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "e857b069.b326a"
            ]
        ]
    },
    {
        "id": "e857b069.b326a",
        "type": "ui_numeric",
        "z": "c68db1a2.68e94",
        "name": "",
        "label": "Pump GPIO",
        "tooltip": "",
        "group": "96ccbe54.5ee14",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": "1",
        "x": 390,
        "y": 60,
        "wires": [
            [
                "d4b87a87.b08d38"
            ]
        ]
    },
    {
        "id": "d4b87a87.b08d38",
        "type": "change",
        "z": "c68db1a2.68e94",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::hlt_pump_gpio",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c3ac7050.b39bb",
        "type": "inject",
        "z": "c68db1a2.68e94",
        "name": "Load BK Pump GPIO",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#:(storeInFile)::bk_pump_gpio",
        "payloadType": "flow",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "a807b3a7.63071"
            ]
        ]
    },
    {
        "id": "a807b3a7.63071",
        "type": "ui_numeric",
        "z": "c68db1a2.68e94",
        "name": "",
        "label": "Pump GPIO",
        "tooltip": "",
        "group": "e71aa9ca.9bbda8",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": "1",
        "x": 430,
        "y": 440,
        "wires": [
            [
                "ff73a129.b13aa"
            ]
        ]
    },
    {
        "id": "ff73a129.b13aa",
        "type": "change",
        "z": "c68db1a2.68e94",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::bk_pump_gpio",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "54620947.c55208",
        "type": "function",
        "z": "c68db1a2.68e94",
        "name": "GPIO python setup",
        "func": "\nif (msg.payload)\n    msg.payload = flow.get(\"hlt_pump_gpio\", \"storeInFile\") + \" 1 200\"\nelse\n    msg.payload = flow.get(\"hlt_pump_gpio\", \"storeInFile\") + \" 0 0\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 523,
        "y": 160,
        "wires": [
            [
                "8145dd86.52e24",
                "36c239e3.206b36"
            ]
        ]
    },
    {
        "id": "8145dd86.52e24",
        "type": "exec",
        "z": "c68db1a2.68e94",
        "command": "sudo python /home/pi/.node-red/projects/brew3/gpio.py",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "gpio.py",
        "x": 741,
        "y": 128,
        "wires": [
            [
                "36c239e3.206b36"
            ],
            [
                "36c239e3.206b36"
            ],
            []
        ]
    },
    {
        "id": "36c239e3.206b36",
        "type": "function",
        "z": "c68db1a2.68e94",
        "name": "pump gpio",
        "func": "node.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 931,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6d7905e8.76a75c",
        "type": "function",
        "z": "c68db1a2.68e94",
        "name": "GPIO python setup",
        "func": "\nif (msg.payload)\n    msg.payload = flow.get(\"bk_pump_gpio\", \"storeInFile\") + \" 1 200\"\nelse\n    msg.payload = flow.get(\"bk_pump_gpio\", \"storeInFile\") + \" 0 0\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 516,
        "y": 520,
        "wires": [
            [
                "f02a3ca8.82e89",
                "50dd1f9b.cbf36"
            ]
        ]
    },
    {
        "id": "f02a3ca8.82e89",
        "type": "exec",
        "z": "c68db1a2.68e94",
        "command": "sudo python /home/pi/.node-red/projects/brew3/gpio.py",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "gpio.py",
        "x": 746,
        "y": 488,
        "wires": [
            [
                "50dd1f9b.cbf36"
            ],
            [
                "50dd1f9b.cbf36"
            ],
            []
        ]
    },
    {
        "id": "50dd1f9b.cbf36",
        "type": "function",
        "z": "c68db1a2.68e94",
        "name": "pump gpio",
        "func": "node.log(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 936,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "380c6638.cfbaba",
        "type": "exec",
        "z": "34bce47d.6c8dac",
        "command": "sudo python /home/pi/.node-red/projects/brew3/raspiTemp.py",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "raspiTemp.py",
        "x": 290,
        "y": 560,
        "wires": [
            [
                "c61de4e6.669938",
                "be8d11ac.ca2d6"
            ],
            [
                "c61de4e6.669938"
            ],
            []
        ]
    },
    {
        "id": "c61de4e6.669938",
        "type": "ui_text",
        "z": "34bce47d.6c8dac",
        "group": "867a95f.bdb8168",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "RasPi temp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 470,
        "y": 560,
        "wires": []
    },
    {
        "id": "aed8dcc6.78c0d",
        "type": "inject",
        "z": "34bce47d.6c8dac",
        "name": "",
        "props": [],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "380c6638.cfbaba"
            ]
        ]
    },
    {
        "id": "45127398.e9ee0c",
        "type": "inject",
        "z": "c68db1a2.68e94",
        "name": "init hlt pump state",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 131,
        "y": 160,
        "wires": [
            [
                "37dfd73f.3deab8"
            ]
        ]
    },
    {
        "id": "ee290633.4e3358",
        "type": "inject",
        "z": "c68db1a2.68e94",
        "name": "init bk pump state",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 138,
        "y": 520,
        "wires": [
            [
                "6d456b34.463524"
            ]
        ]
    },
    {
        "id": "79edc285.d2e28c",
        "type": "inject",
        "z": "c68db1a2.68e94",
        "name": "init mlt pump state",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 138,
        "y": 320,
        "wires": [
            [
                "b73c6b10.f42fe8"
            ]
        ]
    },
    {
        "id": "be8d11ac.ca2d6",
        "type": "function",
        "z": "34bce47d.6c8dac",
        "name": "Send values to chart",
        "func": "var entryDate = new Date();\nvar outputTemp = parseFloat(msg.payload.split(\"-\")[0]);\n\n//node.log(outputTemp);\n\nvar temp_msg = {};\ntemp_msg.topic = \"Temp\";\ntemp_msg.payload = {x: entryDate, y: outputTemp};\n\nvar target_msg = {};\ntarget_msg.topic = \"Target\";\ntarget_msg.payload = {x: entryDate, y: \"50\"};\n\nreturn [[target_msg, temp_msg]];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 520,
        "wires": [
            [
                "df795a26.0b4388",
                "2e787b52.8f68d4"
            ],
            [
                "df795a26.0b4388",
                "2e787b52.8f68d4"
            ]
        ]
    },
    {
        "id": "df795a26.0b4388",
        "type": "ui_template",
        "z": "34bce47d.6c8dac",
        "group": "867a95f.bdb8168",
        "name": "rasPi chart.js",
        "order": 6,
        "width": "6",
        "height": "4",
        "format": "<!--\nA node-red Dashboard UI template to draw charts using chart.js\nBefore use download the file Chart.bundle.min.js from chartjs.org and \nsave in an appropriate folder (e.g. .node-red/static). \nIn settings.js set httpStatic to the full path of that folder and restart node-red.\nMake sure that the options for 'Pass through messages' and 'Add output messages' \nin this node are cleared.\nFor basic use set the id and size you want in the canvas tag and set chartID to the id\nSetup chartDef as required for your chart (see the chart.js docs)\nIn addition, for each dataset specify in chartDef the message topic that you will use for that channel.\nTo (optionally) provide the chart with a one-off set of data send the node a message with:\nmsg.action = \"load\"\nmsg.payload = [\n{topic: \"mytopic1\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n{topic: \"mytopic2\", data: [{x: x1,y:y2},{x:x2,y:y2},...]},\n...]\nWhere mytopic1 and mytopic2 are the the topics specified in the chartDef\n\nTo provide the chart with data incrementally (for a time series for example)\nsend it messages of the form\n{topic: \"mytopic1\", payload: {x:xvalue,y:yvalue}}\nThe chart will be updated as each sample is provided.\nTo limit the growth of the chart set chartMaxPoints and/or chartTimeSpan in the Chart Helper node\nas described at the head of that node.\nIf you find that chart seems to flicker and scroll bars come and go then try \nsetting a size other than auto in the Size specification for this node.\n\nFor Bar charts the x value is the label for the bar and the y value is the bar value\n\nNote that since the chart samples are stored in the browser then the chart will be cleared each\ntime the browser is refreshed (and will be clear on initially opening the view). In order to \nprovided persistency over browser opening and refresh this node may be used in conjunction with\nthe Chart Helper function node.  Details for its use are in the source of that node.\n\nIf your flow includes more that one instance of this script then the line fetching \nChart.bundle.min.js need only be included in one of them\n-->\n<script src=\"/Chart.bundle.min.js\"></script>\n<canvas id=\"rasPiChart\" width=\"300\" height=\"200\"></canvas>\n<script>\n(function() {\n    var chartID = \"rasPiChart\";           // set this to the id you have specified in the canvas tag above\n    // setup the chart definition as defined in the chart.js documentation, in addition setting up the topic\n    // for each channel\n    var chartDef = {\n        type: 'line',\n        data: {\n            datasets: [{\n                topic: \"Target\",    // used here not by chart.js\n                label: \"Target\",\n                yAxisID: \"1\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#0000ff\",\n                pointRadius: 0,\n                pointBorderColor: \"#0000ff\",\n                pointBackgroundColor: \"#0000ff\",\n                backgroundColor:  \"#0000ff\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }, {\n                topic: \"Temp\",    // used here not by chart.js\n                label: \"Temp\",\n                yAxisID: \"2\",\n                fill: false,\n                lineTension: 0,\n                borderColor: \"#ff0000\",\n                pointRadius: 0,\n                pointBorderColor: \"#ff0000\",\n                pointBackgroundColor: \"#ff0000\",\n                backgroundColor:  \"#ff0000\",\n                borderWidth: 1,\n                data: []  // data is written here later\n            }]\n        },\n        options: {\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    time: {\n                        unit: 'minute',\n                        unitStepSize: 1,\n                        displayFormats: {\n                            minute: 'HH:mm'\n                        }\n                    },\n                    ticks: {\n                        autoSkip: true,\n                        maxTicksLimit: 3,\n                        maxRotation: 0,\n                        minRotation: 0\n                    }\n                }],\n                yAxes: [{\n                    id: \"1\",\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }, {\n                    id: \"2\",\n                    display: false,\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 5\n                    }\n                }]\n            },\n            animation: {\n                duration: 0\n            }\n        }\n    }\n        \n/***** You shouldn't normally need to change anything below here *****/    \n    var myChart = null;\n    var loaded = false;     // indicates whether we have already had a load action\n    var chartTimeSpan;\n    var chartMaxPoints;\n\n    function doChart(msg, scope) {\n        if (!myChart) {\n            // chart does not exist so load the data and create it\n            var ctx = document.getElementById(chartID);\n            myChart = new Chart(ctx, chartDef);     \n        }\n        // chart already exists, update it\n        var datasets = myChart.data.datasets;\n        // is this a load or preload action?\n        if (msg.action === \"load\" || msg.action === \"preload\") {\n            // yes, do not allow preload if we have already had a load\n            // so do it if this is a load or we have not previously had a load\n            if (msg.action === \"load\" || !loaded) {\n                // pick up chartTimeSpan and chartMaxPoints if they have been provided\n                if (typeof msg.chartTimeSpan != 'undefined') {\n                    chartTimeSpan = msg.chartTimeSpan;\n                }\n                if (typeof msg.chartMaxPoints != 'undefined') {\n                    chartMaxPoints = msg.chartMaxPoints;\n                }\n                    \n                // replace existing data for matching topics\n                for (var j = 0; j < msg.payload.length; j++) {\n                    var topic = msg.payload[j].topic;\n                    // find it in the chart\n                    for (var i = 0; i < datasets.length; i++) {\n                        if (datasets[i].topic == topic) {\n                            // if stripping old samples by time is required then ensure the x value is Date\n                            if (chartTimeSpan > 0 ) {\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    if (typeof data[k].x === \"string\") {\n                                        data[k].x = new Date(data[k].x);\n                                    }\n                                }\n                            }\n                            if (chartDef.type !== \"bar\") {\n                                datasets[i].data = msg.payload[j].data;\n                            } else {\n                                // bar chart so x values must go to labels and y values to dataset\n                                datasets[i].data = [];\n                                myChart.data.labels = [];\n                                var data = msg.payload[j].data;\n                                for (var k = 0; k < data.length; k++) {\n                                    datasets[i].data.push(data[k].y);\n                                    myChart.data.labels.push(data[k].x);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (msg.action === \"load\") loaded = true;\n            myChart.update();\n        } else {\n            // does the topic match one of the datasets?\n            for (var i = 0; i < datasets.length; i++) {\n                if (datasets[i].topic == msg.topic) {\n                    // if stripping old samples by time is required then ensure the x value is Date\n                    if (chartTimeSpan > 0 && typeof msg.payload.x === \"string\") {\n                        msg.payload.x = new Date(msg.payload.x);\n                    }\n                    if (chartDef.type !== \"bar\") {\n                        datasets[i].data.push(msg.payload);\n                    } else {\n                         // bar chart so x value must go to labels and y value to dataset\n                        datasets[i].data.push(msg.payload.y);\n                        myChart.data.labels.push(msg.payload.x);\n                    }\n                    myChart.update();\n                    break;\n                }\n            }\n        }\n        // strip off samples older than now\n        // charTimeSpan == 0 implies don't do it\n        var shifted = false;\n        if (chartTimeSpan > 0) {\n            var now = new Date();\n            var oldestTimeAllowed = now - chartTimeSpan;\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data[0] && getTime(dataset.data[0].x) < oldestTimeAllowed) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        // strip samples off the front if there are now too many\n        // charTimeSpan == 0 implies don't do it\n        if (chartMaxPoints > 0) {\n            for (var i = 0; i < datasets.length; i++) {\n                dataset = datasets[i];\n                while(dataset.data.length > chartMaxPoints) {\n                    dataset.data.shift();\n                    shifted = true;\n                }\n            }\n        }\n        if (shifted) {\n            myChart.update();\n        }\n        \n        var maxValue = getMax(myChart);\n        myChart.options.scales.yAxes[0].ticks.max = maxValue + 5;\n        myChart.options.scales.yAxes[1].ticks.max = maxValue + 5;\n        \n        var minValue = getMin(myChart);\n        myChart.options.scales.yAxes[0].ticks.min = minValue - 5;\n        myChart.options.scales.yAxes[1].ticks.min = minValue - 5;\n    };\n\n    var getMax = function(chart) {\n        datasets = chart.data.datasets;\n        var maxValue = 0;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y > maxValue) {\n                    maxValue = d.y\n                }\n            })\n        }\n        return parseInt(maxValue);\n    }\n\n    var getMin = function(chart) {\n        datasets = chart.data.datasets;\n        var minValue = 1000;\n        for(var i=0; i<datasets.length; i++) {\n            dataset=datasets[i]\n            if(chart.data.datasets[i].hidden) {\n                continue;\n            }\n            dataset.data.forEach(function(d) {\n                if(typeof(d.y)==\"number\" && d.y < minValue) {\n                    minValue = d.y\n                }\n            })\n        }\n        return parseInt(minValue);\n    }\n\n    // gets the time of an x value, works for strings or Date types\n    function getTime(x) {\n        if (typeof x === \"string\") x = new Date(x);\n        return x.getTime();\n    }\n    \n    // builds the preload message for sending back to the chart helper\n    function preloadMsg() {\n        var preMsg = {action: \"preload\", payload: \"preload\"};\n        // build array of topics in chart\n        var topics = [];\n        for (var i=0; i<chartDef.data.datasets.length; i++) {\n            topics.push(chartDef.data.datasets[i].topic);\n        }\n        preMsg.topics = topics;\n        // has the chart already been created\n        if (myChart) {\n            preMsg.lastXValue = 1;\n        } else {\n            preMsg.lastXValue = 0;\n        }\n        return preMsg;\n    }\n\n    (function(scope) {\n        // this code gets run when the a view is opened on the node in the browser\n        // send a preload message back to node red to ask it send\n        // us a complete set of data. Pass down max points and time span to the helper node for it to use\n        // plus an array of the topics of interest\n        scope.send( preloadMsg() );\n        \n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                doChart(msg, scope);\n            }\n        });\n    })(scope);\n})();\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "2e787b52.8f68d4"
            ]
        ]
    },
    {
        "id": "2e787b52.8f68d4",
        "type": "function",
        "z": "34bce47d.6c8dac",
        "name": "rasPi Chart Helper",
        "func": "// A helper for the node-red chart.js template node\n// see the template node for the majority of the user defined data\n// here all that is needed is to setup values to limit the length of the chart\n// Firstly chartMaxPoints may be set non-zero and (for each channel) when the number\n// of points exceeds this value then the oldest samples will be discarded.\n// Alternatively (or in addition) if the x axis is time based then chartTimeSpan (milliseconds)\n// may be set and then old samples will be discarded to limit the chart to this time span.\n\nvar chartMaxPoints = 0;             //max no points in a chart before they drop off the left. Set to zero to disable\nvar chartTimeSpan = 60*60*1000;     //chart time span 4 mins. Set to zero to disable\n\n// ----------------------------------------------------------\n// You should not need to change anything below here\n\n// with inputs connected to the same nodes as a chart.js node this maintains a chart history\n// for preloading into the chart when it is opened in the browser\n\nvar topicsOfinterest = context.get('topicsOfInterest');    // can't use null here\nif (typeof topicsOfInterest == 'undefined') topicsOfInterest = null;\n\nvar msg2 = null;\nvar datasets = context.get('datasets') || [];\n// each dataset maps to a channel on the chart and consists of a hash with fields\n// topic: the topic name of the channel\n// data: an array of data points {x: x_value, y: y_value}\n// If msg.action == \"preload\" then the topic and payload are ignored and a message is passed\n// on containing the current chart data and msg.action still set to preload\n\nif (msg.action === \"preload\") {\n    // we should have been passed the topics of interest\n    topicsOfInterest = msg.topics;      // null if not provided\n    context.set('topicsOfInterest', topicsOfInterest);\n    // send a message containing the current chart data time range values, leave rest of msg as is\n    msg.payload = datasets;\n    msg.chartMaxPoints = chartMaxPoints;\n    msg.chartTimeSpan = chartTimeSpan;\n} else if (msg.action === \"restore\") {\n    // restoring from persistent memory\n    // step through the given datasets, if any\n    if (Array.isArray(msg.payload)) {\n        for (var i = 0; i < msg.payload.length; i++) {\n            topic = msg.payload[i].topic;\n            // find the matching topic\n            var found = false;\n            for (var k = 0; k < datasets.length; k++) {\n                if (datasets[k].topic == topic) {\n                    // insert the data in front of any that has been acquired since startup\n                    datasets[k].data = msg.payload[i].data.concat(datasets[k].data);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                // new topic so make a new dataset and fill it\n                datasets.push({topic: topic, data: msg.payload[i].data});\n            }\n        }\n    }\n    // remember that we have restored in order to enable future writes to persistent store\n    context.set(\"restored\", true);\n    // send a preload action to the chart\n    msg.action = \"preload\";\n    msg.payload = datasets;\n} else if (msg.action === \"load\") {\n    // replace existing data for matching topics\n    for (var j = 0; j < msg.payload.length; j++) {\n        var topic = msg.payload[j].topic;\n        // find it in the chart\n        found = false;\n        for (i = 0; i < datasets.length; i++) {\n            if (datasets[i].topic == topic) {\n                datasets[i].data = msg.payload[j].data;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset and fill it\n            datasets.push({topic: topic, data: msg.payload[j].data});\n        }\n    }\n    msg = null;         // don't send anything on\n} else {\n    // check whether the topic is one we are interested in\n    if (topicsOfInterest === null  || topicsOfInterest.indexOf(msg.topic) >= 0) {\n        found = false;\n        // find the right dataset if it already exists\n        for (i = 0; i < datasets.length; i++) {\n            dataset = datasets[i];\n            if (dataset.topic == msg.topic) {\n                found = true;\n                dataset.data.push(msg.payload);\n                break;\n            }\n        }\n        if (!found) {\n            // new topic so make a new dataset\n            datasets.push({topic: msg.topic, data: [msg.payload]});\n        }\n    } else {\n        // ignore topics that are not of interest\n    }\n    // do not pass on a message to o/p 1, send the datasets to o/p 2 for persistent\n    // storage if required and we have been given data on startup\n    // this is to prevent the persistent store being overwritten before it has been read\n    msg = null;\n    if (context.get(\"restored\")) {\n        msg2 = {payload: datasets};\n    }\n}\n    \n// remove any points that are too old\nif (chartTimeSpan > 0) {\n    var now = new Date();\n    var oldestTimeAllowed = new Date();\n    oldestTimeAllowed.setTime(now.getTime() - (chartTimeSpan));\n    for (i = 0; i < datasets.length; i++) {\n        var data = datasets[i].data;\n        while (data.length > 0 ) {\n            // convert the x value (in place) to a Date if it is a string\n            if (typeof data[0].x === \"string\") {\n                data[0].x = new Date(data[0].x);\n            }            \n            if (data[0].x < oldestTimeAllowed) {\n                data.shift();\n            } else {\n                break;\n            }\n        }\n    }\n}\n// strip samples off the front if there are now too many\n// charTimeSpan == 0 implies don't do it\nif (chartMaxPoints > 0) {\n    var shifted = false;\n    for (i = 0; i < datasets.length; i++) {\n        data = datasets[i].data;\n        while(data.length > chartMaxPoints) {\n            data.shift();\n        }\n    }\n}\ncontext.set('datasets', datasets);\nreturn [msg,msg2];\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "df795a26.0b4388"
            ],
            []
        ]
    },
    {
        "id": "7f0258cf.b2a9b8",
        "type": "sensor-dynamic-ds18b20",
        "z": "34bce47d.6c8dac",
        "name": "temp-HLT",
        "topic": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "30b2e156.aa14be",
                "78391837.520088",
                "bfd50872.a6f5a8"
            ]
        ]
    },
    {
        "id": "30b2e156.aa14be",
        "type": "debug",
        "z": "34bce47d.6c8dac",
        "d": true,
        "name": "dynamic DS18B20",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 40,
        "wires": []
    },
    {
        "id": "fc770a7b.caa508",
        "type": "inject",
        "z": "34bce47d.6c8dac",
        "name": "",
        "props": [
            {
                "p": "sensorid",
                "v": "#:(storeInFile)::hlt_sensorid",
                "vt": "global"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "7f0258cf.b2a9b8"
            ]
        ]
    },
    {
        "id": "28c9fc5a.1795d4",
        "type": "ui_dropdown",
        "z": "10a92214.f225ae",
        "name": "HLT Sensor",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "9f19d793.eac5f8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "x": 710,
        "y": 60,
        "wires": [
            [
                "ca5ec009.d9636"
            ]
        ]
    },
    {
        "id": "9f3e474e.46fd98",
        "type": "function",
        "z": "10a92214.f225ae",
        "name": "",
        "func": "\nvar listArray = [];\n\nmsg.options = msg.payload;\nmsg.payload = global.get(\"mlt_sensorid\", \"storeInFile\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 120,
        "wires": [
            [
                "fb4a023.2ed7a"
            ]
        ]
    },
    {
        "id": "146d3e61.b44402",
        "type": "inject",
        "z": "10a92214.f225ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "d784a91.ea22a58"
            ]
        ]
    },
    {
        "id": "5b1d0bb7.0d7354",
        "type": "ui_dropdown",
        "z": "10a92214.f225ae",
        "name": "BK Sensor",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "4db7f25b.b9ea8c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "x": 710,
        "y": 180,
        "wires": [
            [
                "323caca.1595854"
            ]
        ]
    },
    {
        "id": "fb4a023.2ed7a",
        "type": "ui_dropdown",
        "z": "10a92214.f225ae",
        "name": "MLT Sensor",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "f52ce78c.180578",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "x": 710,
        "y": 120,
        "wires": [
            [
                "a684e64f.58ff68"
            ]
        ]
    },
    {
        "id": "ca5ec009.d9636",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set hlt_sensorid",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::hlt_sensorid",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a684e64f.58ff68",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set mlt_sensorid",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::mlt_sensorid",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "323caca.1595854",
        "type": "change",
        "z": "10a92214.f225ae",
        "name": "set bk_sensorid",
        "rules": [
            {
                "t": "set",
                "p": "#:(storeInFile)::bk_sensorid",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1cdf203e.698cd",
        "type": "function",
        "z": "10a92214.f225ae",
        "name": "",
        "func": "\nvar listArray = [];\n\nmsg.options = msg.payload;\nmsg.payload = global.get(\"hlt_sensorid\", \"storeInFile\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 60,
        "wires": [
            [
                "28c9fc5a.1795d4"
            ]
        ]
    },
    {
        "id": "cff451df.2a7a6",
        "type": "function",
        "z": "10a92214.f225ae",
        "name": "",
        "func": "\nvar listArray = [];\n\nmsg.options = msg.payload;\nmsg.payload = global.get(\"bk_sensorid\", \"storeInFile\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "5b1d0bb7.0d7354"
            ]
        ]
    },
    {
        "id": "23b84038.6c559",
        "type": "inject",
        "z": "34bce47d.6c8dac",
        "name": "",
        "props": [
            {
                "p": "sensorid",
                "v": "#:(storeInFile)::mlt_sensorid",
                "vt": "global"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "394e10ca.a2285"
            ]
        ]
    },
    {
        "id": "394e10ca.a2285",
        "type": "sensor-dynamic-ds18b20",
        "z": "34bce47d.6c8dac",
        "name": "temp-MLT",
        "topic": "",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "958b2b91.c4c778",
                "ae06031b.f8519",
                "4e3101c4.4292f"
            ]
        ]
    },
    {
        "id": "90fc772e.261f08",
        "type": "inject",
        "z": "34bce47d.6c8dac",
        "name": "",
        "props": [
            {
                "p": "sensorid",
                "v": "#:(storeInFile)::bk_sensorid",
                "vt": "global"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "d087f00b.735f5"
            ]
        ]
    },
    {
        "id": "d087f00b.735f5",
        "type": "sensor-dynamic-ds18b20",
        "z": "34bce47d.6c8dac",
        "name": "temp-BK",
        "topic": "",
        "x": 360,
        "y": 420,
        "wires": [
            [
                "720cfea9.d2587",
                "b8235e4b.fda1d"
            ]
        ]
    },
    {
        "id": "d784a91.ea22a58",
        "type": "http request",
        "z": "10a92214.f225ae",
        "name": "get sensors",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/sensors/1wire/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 310,
        "y": 120,
        "wires": [
            [
                "1cdf203e.698cd",
                "9f3e474e.46fd98",
                "cff451df.2a7a6"
            ]
        ]
    }
]